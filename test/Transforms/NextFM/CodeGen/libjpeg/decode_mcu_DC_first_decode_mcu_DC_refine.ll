; AUTOMATICALLY GENERATED BY tools/llvm-nextfm-remark/compare-mergesize.rb
;
; RUN: %opt -S --passes="multiple-func-merging" --multiple-func-merging-only=decode_mcu_DC_first --multiple-func-merging-only=decode_mcu_DC_refine -o %t.mfm.ll %s
; RUN: %opt -S --passes="func-merging" --func-merging-only=decode_mcu_DC_first --func-merging-only=decode_mcu_DC_refine -o %t.fm.ll %s
; RUN: %llc --filetype=obj %t.mfm.ll -o %t.mfm.o
; RUN: %llc --filetype=obj %t.fm.ll -o %t.fm.o
; RUN: %strip %t.mfm.o
; RUN: %strip %t.fm.o
; RUN: [[ $(stat -c%%s %t.mfm.o) -le $(stat -c%%s %t.fm.o) ]]
; XFAIL: *

; ModuleID = '../benchmarks/mibench/consumer/jpeg/cjpeg.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bitread_working_state = type { i8*, i64, i32, i64, i32, %struct.jpeg_decompress_struct*, i32* }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type { i8**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_sarray_control*, %struct.backing_store_struct }
%struct.backing_store_struct = type { void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*)*, %struct._IO_FILE*, [64 x i8] }
%struct.jpeg_common_struct.775 = type { %struct.jpeg_error_mgr.766*, %struct.jpeg_memory_mgr.773*, %struct.jpeg_progress_mgr*, i32, i32 }
%struct.jpeg_error_mgr.766 = type { {}*, void (%struct.jpeg_common_struct.775*, i32)*, {}*, void (%struct.jpeg_common_struct.775*, i8*)*, {}*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_memory_mgr.773 = type { i8* (%struct.jpeg_common_struct.775*, i32, i64)*, i8* (%struct.jpeg_common_struct.775*, i32, i64)*, i8** (%struct.jpeg_common_struct.775*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct.775*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct.775*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct.775*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct.775*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct.775*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct.775*, i32)*, {}*, i64 }
%struct.jvirt_barray_control = type { [64 x i16]**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_barray_control*, %struct.backing_store_struct }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, [16 x i32 (%struct.jpeg_decompress_struct*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.d_derived_tbl = type { [17 x i64], [18 x i64], [17 x i32], %struct.JHUFF_TBL*, [256 x i32], [256 x i8] }
%struct.jpeg_decompress_struct.424 = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr.409*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master.413*, %struct.jpeg_d_main_controller.414*, %struct.jpeg_d_coef_controller.415*, %struct.jpeg_d_post_controller.416*, %struct.jpeg_input_controller.417*, %struct.jpeg_marker_reader.418*, %struct.jpeg_entropy_decoder.419*, %struct.jpeg_inverse_dct.420*, %struct.jpeg_upsampler.421*, %struct.jpeg_color_deconverter.422*, %struct.jpeg_color_quantizer.423* }
%struct.jpeg_source_mgr.409 = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct.424*)*, void (%struct.jpeg_decompress_struct.424*, i64)*, i32 (%struct.jpeg_decompress_struct.424*, i32)*, {}* }
%struct.jpeg_decomp_master.413 = type { {}*, {}*, i32 }
%struct.jpeg_d_main_controller.414 = type { void (%struct.jpeg_decompress_struct.424*, i32)*, void (%struct.jpeg_decompress_struct.424*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller.415 = type { {}*, i32 (%struct.jpeg_decompress_struct.424*)*, {}*, i32 (%struct.jpeg_decompress_struct.424*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller.416 = type { void (%struct.jpeg_decompress_struct.424*, i32)*, void (%struct.jpeg_decompress_struct.424*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller.417 = type { i32 (%struct.jpeg_decompress_struct.424*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader.418 = type { {}*, i32 (%struct.jpeg_decompress_struct.424*)*, i32 (%struct.jpeg_decompress_struct.424*)*, i32 (%struct.jpeg_decompress_struct.424*)*, [16 x i32 (%struct.jpeg_decompress_struct.424*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder.419 = type { {}*, i32 (%struct.jpeg_decompress_struct.424*, [64 x i16]**)* }
%struct.jpeg_inverse_dct.420 = type { {}*, [10 x void (%struct.jpeg_decompress_struct.424*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler.421 = type { {}*, void (%struct.jpeg_decompress_struct.424*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter.422 = type { {}*, void (%struct.jpeg_decompress_struct.424*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer.423 = type { void (%struct.jpeg_decompress_struct.424*, i32)*, void (%struct.jpeg_decompress_struct.424*, i8**, i8**, i32)*, {}*, {}* }
%struct.phuff_entropy_decoder = type { %struct.jpeg_entropy_decoder.419, %struct.bitread_perm_state, %struct.savable_state.614, i32, [4 x %struct.d_derived_tbl*], %struct.d_derived_tbl* }
%struct.bitread_perm_state = type { i64, i32, i32 }
%struct.savable_state.614 = type { i32, [4 x i32] }
%struct.bitread_working_state.612 = type { i8*, i64, i32, i64, i32, %struct.jpeg_decompress_struct.424*, i32* }

@extend_test.47 = external hidden constant [16 x i32], align 16
@extend_offset.48 = external hidden constant [16 x i32], align 16

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

; Function Attrs: noinline nounwind optnone ssp uwtable
declare i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*, i64, i32, i32) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
declare i32 @jpeg_huff_decode(%struct.bitread_working_state*, i64, i32, %struct.d_derived_tbl*, i32) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @decode_mcu_DC_first(%struct.jpeg_decompress_struct.424* %0, [64 x i16]** %1) #1 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.jpeg_decompress_struct.424*, align 8
  %5 = alloca [64 x i16]**, align 8
  %6 = alloca %struct.phuff_entropy_decoder*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [64 x i16]*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.bitread_working_state.612, align 8
  %16 = alloca %struct.savable_state.614, align 4
  %17 = alloca %struct.d_derived_tbl*, align 8
  %18 = alloca %struct.jpeg_component_info*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store %struct.jpeg_decompress_struct.424* %0, %struct.jpeg_decompress_struct.424** %4, align 8
  store [64 x i16]** %1, [64 x i16]*** %5, align 8
  %21 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %21, i32 0, i32 79
  %23 = load %struct.jpeg_entropy_decoder.419*, %struct.jpeg_entropy_decoder.419** %22, align 8
  %24 = bitcast %struct.jpeg_entropy_decoder.419* %23 to %struct.phuff_entropy_decoder*
  store %struct.phuff_entropy_decoder* %24, %struct.phuff_entropy_decoder** %6, align 8
  %25 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %25, i32 0, i32 71
  %27 = load i32, i32* %26, align 8
  store i32 %27, i32* %7, align 4
  %28 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %28, i32 0, i32 49
  %30 = load i32, i32* %29, align 8
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %44

32:                                               ; preds = %2
  %33 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %34 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %33, i32 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %43

37:                                               ; preds = %32
  %38 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %39 = call i32 @process_restart.46(%struct.jpeg_decompress_struct.424* %38)
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %37
  store i32 0, i32* %3, align 4
  br label %271

42:                                               ; preds = %37
  br label %43

43:                                               ; preds = %42, %32
  br label %44

44:                                               ; preds = %43, %2
  %45 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %46 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 5
  store %struct.jpeg_decompress_struct.424* %45, %struct.jpeg_decompress_struct.424** %46, align 8
  %47 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %47, i32 0, i32 5
  %49 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %48, align 8
  %50 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %49, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 0
  store i8* %51, i8** %52, align 8
  %53 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %53, i32 0, i32 5
  %55 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %54, align 8
  %56 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %55, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 1
  store i64 %57, i64* %58, align 8
  %59 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %60 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %59, i32 0, i32 72
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 2
  store i32 %61, i32* %62, align 8
  %63 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %64 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %63, i32 0, i32 1
  %65 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %64, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %13, align 8
  %67 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %68 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %67, i32 0, i32 1
  %69 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %68, i32 0, i32 1
  %70 = load i32, i32* %69, align 8
  store i32 %70, i32* %14, align 4
  %71 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %72 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %71, i32 0, i32 1
  %73 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %72, i32 0, i32 2
  %74 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 6
  store i32* %73, i32** %74, align 8
  %75 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %76 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %75, i32 0, i32 2
  %77 = bitcast %struct.savable_state.614* %16 to i8*
  %78 = bitcast %struct.savable_state.614* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 8 %78, i64 20, i1 false)
  store i32 0, i32* %10, align 4
  br label %79

79:                                               ; preds = %235, %44
  %80 = load i32, i32* %10, align 4
  %81 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %82 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %81, i32 0, i32 66
  %83 = load i32, i32* %82, align 8
  %84 = icmp slt i32 %80, %83
  br i1 %84, label %85, label %238

85:                                               ; preds = %79
  %86 = load [64 x i16]**, [64 x i16]*** %5, align 8
  %87 = load i32, i32* %10, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [64 x i16]*, [64 x i16]** %86, i64 %88
  %90 = load [64 x i16]*, [64 x i16]** %89, align 8
  store [64 x i16]* %90, [64 x i16]** %12, align 8
  %91 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %92 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %91, i32 0, i32 67
  %93 = load i32, i32* %10, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [10 x i32], [10 x i32]* %92, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  store i32 %96, i32* %11, align 4
  %97 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %98 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %97, i32 0, i32 63
  %99 = load i32, i32* %11, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [4 x %struct.jpeg_component_info*], [4 x %struct.jpeg_component_info*]* %98, i64 0, i64 %100
  %102 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %101, align 8
  store %struct.jpeg_component_info* %102, %struct.jpeg_component_info** %18, align 8
  %103 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %104 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %103, i32 0, i32 4
  %105 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %18, align 8
  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i32 0, i32 5
  %107 = load i32, i32* %106, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [4 x %struct.d_derived_tbl*], [4 x %struct.d_derived_tbl*]* %104, i64 0, i64 %108
  %110 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %109, align 8
  store %struct.d_derived_tbl* %110, %struct.d_derived_tbl** %17, align 8
  %111 = load i32, i32* %14, align 4
  %112 = icmp slt i32 %111, 8
  br i1 %112, label %113, label %128

113:                                              ; preds = %85
  %114 = load i64, i64* %13, align 8
  %115 = load i32, i32* %14, align 4
  %116 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %15, i64 %114, i32 %115, i32 0)
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %119, label %118

118:                                              ; preds = %113
  store i32 0, i32* %3, align 4
  br label %271

119:                                              ; preds = %113
  %120 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 3
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %13, align 8
  %122 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 4
  %123 = load i32, i32* %122, align 8
  store i32 %123, i32* %14, align 4
  %124 = load i32, i32* %14, align 4
  %125 = icmp slt i32 %124, 8
  br i1 %125, label %126, label %127

126:                                              ; preds = %119
  store i32 1, i32* %19, align 4
  br label %155

127:                                              ; preds = %119
  br label %128

128:                                              ; preds = %127, %85
  %129 = load i64, i64* %13, align 8
  %130 = load i32, i32* %14, align 4
  %131 = sub nsw i32 %130, 8
  %132 = zext i32 %131 to i64
  %133 = ashr i64 %129, %132
  %134 = trunc i64 %133 to i32
  %135 = and i32 %134, 255
  store i32 %135, i32* %20, align 4
  %136 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %17, align 8
  %137 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %136, i32 0, i32 4
  %138 = load i32, i32* %20, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [256 x i32], [256 x i32]* %137, i64 0, i64 %139
  %141 = load i32, i32* %140, align 4
  store i32 %141, i32* %19, align 4
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %154

143:                                              ; preds = %128
  %144 = load i32, i32* %19, align 4
  %145 = load i32, i32* %14, align 4
  %146 = sub nsw i32 %145, %144
  store i32 %146, i32* %14, align 4
  %147 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %17, align 8
  %148 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %147, i32 0, i32 5
  %149 = load i32, i32* %20, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [256 x i8], [256 x i8]* %148, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  store i32 %153, i32* %8, align 4
  br label %168

154:                                              ; preds = %128
  store i32 9, i32* %19, align 4
  br label %155

155:                                              ; preds = %154, %126
  %156 = load i64, i64* %13, align 8
  %157 = load i32, i32* %14, align 4
  %158 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %17, align 8
  %159 = load i32, i32* %19, align 4
  %160 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, %struct.d_derived_tbl*, i32)* @jpeg_huff_decode to i32 (%struct.bitread_working_state.612*, i64, i32, %struct.d_derived_tbl*, i32)*)(%struct.bitread_working_state.612* %15, i64 %156, i32 %157, %struct.d_derived_tbl* %158, i32 %159)
  store i32 %160, i32* %8, align 4
  %161 = icmp slt i32 %160, 0
  br i1 %161, label %162, label %163

162:                                              ; preds = %155
  store i32 0, i32* %3, align 4
  br label %271

163:                                              ; preds = %155
  %164 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 3
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %13, align 8
  %166 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 4
  %167 = load i32, i32* %166, align 8
  store i32 %167, i32* %14, align 4
  br label %168

168:                                              ; preds = %163, %143
  %169 = load i32, i32* %8, align 4
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %171, label %216

171:                                              ; preds = %168
  %172 = load i32, i32* %14, align 4
  %173 = load i32, i32* %8, align 4
  %174 = icmp slt i32 %172, %173
  br i1 %174, label %175, label %187

175:                                              ; preds = %171
  %176 = load i64, i64* %13, align 8
  %177 = load i32, i32* %14, align 4
  %178 = load i32, i32* %8, align 4
  %179 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %15, i64 %176, i32 %177, i32 %178)
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %182, label %181

181:                                              ; preds = %175
  store i32 0, i32* %3, align 4
  br label %271

182:                                              ; preds = %175
  %183 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 3
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %13, align 8
  %185 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 4
  %186 = load i32, i32* %185, align 8
  store i32 %186, i32* %14, align 4
  br label %187

187:                                              ; preds = %182, %171
  %188 = load i64, i64* %13, align 8
  %189 = load i32, i32* %8, align 4
  %190 = load i32, i32* %14, align 4
  %191 = sub nsw i32 %190, %189
  store i32 %191, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = ashr i64 %188, %192
  %194 = trunc i64 %193 to i32
  %195 = load i32, i32* %8, align 4
  %196 = shl i32 1, %195
  %197 = sub nsw i32 %196, 1
  %198 = and i32 %194, %197
  store i32 %198, i32* %9, align 4
  %199 = load i32, i32* %9, align 4
  %200 = load i32, i32* %8, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [16 x i32], [16 x i32]* @extend_test.47, i64 0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = icmp slt i32 %199, %203
  br i1 %204, label %205, label %212

205:                                              ; preds = %187
  %206 = load i32, i32* %9, align 4
  %207 = load i32, i32* %8, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [16 x i32], [16 x i32]* @extend_offset.48, i64 0, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = add nsw i32 %206, %210
  br label %214

212:                                              ; preds = %187
  %213 = load i32, i32* %9, align 4
  br label %214

214:                                              ; preds = %212, %205
  %215 = phi i32 [ %211, %205 ], [ %213, %212 ]
  store i32 %215, i32* %8, align 4
  br label %216

216:                                              ; preds = %214, %168
  %217 = getelementptr inbounds %struct.savable_state.614, %struct.savable_state.614* %16, i32 0, i32 1
  %218 = load i32, i32* %11, align 4
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [4 x i32], [4 x i32]* %217, i64 0, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = load i32, i32* %8, align 4
  %223 = add nsw i32 %222, %221
  store i32 %223, i32* %8, align 4
  %224 = load i32, i32* %8, align 4
  %225 = getelementptr inbounds %struct.savable_state.614, %struct.savable_state.614* %16, i32 0, i32 1
  %226 = load i32, i32* %11, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [4 x i32], [4 x i32]* %225, i64 0, i64 %227
  store i32 %224, i32* %228, align 4
  %229 = load i32, i32* %8, align 4
  %230 = load i32, i32* %7, align 4
  %231 = shl i32 %229, %230
  %232 = trunc i32 %231 to i16
  %233 = load [64 x i16]*, [64 x i16]** %12, align 8
  %234 = getelementptr inbounds [64 x i16], [64 x i16]* %233, i64 0, i64 0
  store i16 %232, i16* %234, align 2
  br label %235

235:                                              ; preds = %216
  %236 = load i32, i32* %10, align 4
  %237 = add nsw i32 %236, 1
  store i32 %237, i32* %10, align 4
  br label %79, !llvm.loop !7

238:                                              ; preds = %79
  %239 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 0
  %240 = load i8*, i8** %239, align 8
  %241 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %242 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %241, i32 0, i32 5
  %243 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %242, align 8
  %244 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %243, i32 0, i32 0
  store i8* %240, i8** %244, align 8
  %245 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 1
  %246 = load i64, i64* %245, align 8
  %247 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %248 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %247, i32 0, i32 5
  %249 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %248, align 8
  %250 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %249, i32 0, i32 1
  store i64 %246, i64* %250, align 8
  %251 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %15, i32 0, i32 2
  %252 = load i32, i32* %251, align 8
  %253 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %254 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %253, i32 0, i32 72
  store i32 %252, i32* %254, align 4
  %255 = load i64, i64* %13, align 8
  %256 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %257 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %256, i32 0, i32 1
  %258 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %257, i32 0, i32 0
  store i64 %255, i64* %258, align 8
  %259 = load i32, i32* %14, align 4
  %260 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %261 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %260, i32 0, i32 1
  %262 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %261, i32 0, i32 1
  store i32 %259, i32* %262, align 8
  %263 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %264 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %263, i32 0, i32 2
  %265 = bitcast %struct.savable_state.614* %264 to i8*
  %266 = bitcast %struct.savable_state.614* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %265, i8* align 4 %266, i64 20, i1 false)
  %267 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %268 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %267, i32 0, i32 3
  %269 = load i32, i32* %268, align 4
  %270 = add i32 %269, -1
  store i32 %270, i32* %268, align 4
  store i32 1, i32* %3, align 4
  br label %271

271:                                              ; preds = %238, %181, %162, %118, %41
  %272 = load i32, i32* %3, align 4
  ret i32 %272
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @decode_mcu_DC_refine(%struct.jpeg_decompress_struct.424* %0, [64 x i16]** %1) #1 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.jpeg_decompress_struct.424*, align 8
  %5 = alloca [64 x i16]**, align 8
  %6 = alloca %struct.phuff_entropy_decoder*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [64 x i16]*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.bitread_working_state.612, align 8
  store %struct.jpeg_decompress_struct.424* %0, %struct.jpeg_decompress_struct.424** %4, align 8
  store [64 x i16]** %1, [64 x i16]*** %5, align 8
  %13 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %13, i32 0, i32 79
  %15 = load %struct.jpeg_entropy_decoder.419*, %struct.jpeg_entropy_decoder.419** %14, align 8
  %16 = bitcast %struct.jpeg_entropy_decoder.419* %15 to %struct.phuff_entropy_decoder*
  store %struct.phuff_entropy_decoder* %16, %struct.phuff_entropy_decoder** %6, align 8
  %17 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %17, i32 0, i32 71
  %19 = load i32, i32* %18, align 8
  %20 = shl i32 1, %19
  store i32 %20, i32* %7, align 4
  %21 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %21, i32 0, i32 49
  %23 = load i32, i32* %22, align 8
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %37

25:                                               ; preds = %2
  %26 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %27 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %26, i32 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %36

30:                                               ; preds = %25
  %31 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %32 = call i32 @process_restart.46(%struct.jpeg_decompress_struct.424* %31)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %30
  store i32 0, i32* %3, align 4
  br label %143

35:                                               ; preds = %30
  br label %36

36:                                               ; preds = %35, %25
  br label %37

37:                                               ; preds = %36, %2
  %38 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %39 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 5
  store %struct.jpeg_decompress_struct.424* %38, %struct.jpeg_decompress_struct.424** %39, align 8
  %40 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %40, i32 0, i32 5
  %42 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %41, align 8
  %43 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %42, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 0
  store i8* %44, i8** %45, align 8
  %46 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %47 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %46, i32 0, i32 5
  %48 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %47, align 8
  %49 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %48, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 1
  store i64 %50, i64* %51, align 8
  %52 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %53 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %52, i32 0, i32 72
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 2
  store i32 %54, i32* %55, align 8
  %56 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %57 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %56, i32 0, i32 1
  %58 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %57, i32 0, i32 0
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %10, align 8
  %60 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %61 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %60, i32 0, i32 1
  %62 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %61, i32 0, i32 1
  %63 = load i32, i32* %62, align 8
  store i32 %63, i32* %11, align 4
  %64 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %65 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %64, i32 0, i32 1
  %66 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %65, i32 0, i32 2
  %67 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 6
  store i32* %66, i32** %67, align 8
  store i32 0, i32* %8, align 4
  br label %68

68:                                               ; preds = %111, %37
  %69 = load i32, i32* %8, align 4
  %70 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %71 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %70, i32 0, i32 66
  %72 = load i32, i32* %71, align 8
  %73 = icmp slt i32 %69, %72
  br i1 %73, label %74, label %114

74:                                               ; preds = %68
  %75 = load [64 x i16]**, [64 x i16]*** %5, align 8
  %76 = load i32, i32* %8, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [64 x i16]*, [64 x i16]** %75, i64 %77
  %79 = load [64 x i16]*, [64 x i16]** %78, align 8
  store [64 x i16]* %79, [64 x i16]** %9, align 8
  %80 = load i32, i32* %11, align 4
  %81 = icmp slt i32 %80, 1
  br i1 %81, label %82, label %93

82:                                               ; preds = %74
  %83 = load i64, i64* %10, align 8
  %84 = load i32, i32* %11, align 4
  %85 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %12, i64 %83, i32 %84, i32 1)
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %88, label %87

87:                                               ; preds = %82
  store i32 0, i32* %3, align 4
  br label %143

88:                                               ; preds = %82
  %89 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 3
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %10, align 8
  %91 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 4
  %92 = load i32, i32* %91, align 8
  store i32 %92, i32* %11, align 4
  br label %93

93:                                               ; preds = %88, %74
  %94 = load i64, i64* %10, align 8
  %95 = load i32, i32* %11, align 4
  %96 = sub nsw i32 %95, 1
  store i32 %96, i32* %11, align 4
  %97 = zext i32 %96 to i64
  %98 = ashr i64 %94, %97
  %99 = trunc i64 %98 to i32
  %100 = and i32 %99, 1
  %101 = icmp ne i32 %100, 0
  br i1 %101, label %102, label %110

102:                                              ; preds = %93
  %103 = load i32, i32* %7, align 4
  %104 = load [64 x i16]*, [64 x i16]** %9, align 8
  %105 = getelementptr inbounds [64 x i16], [64 x i16]* %104, i64 0, i64 0
  %106 = load i16, i16* %105, align 2
  %107 = sext i16 %106 to i32
  %108 = or i32 %107, %103
  %109 = trunc i32 %108 to i16
  store i16 %109, i16* %105, align 2
  br label %110

110:                                              ; preds = %102, %93
  br label %111

111:                                              ; preds = %110
  %112 = load i32, i32* %8, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %8, align 4
  br label %68, !llvm.loop !9

114:                                              ; preds = %68
  %115 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  %117 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %118 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %117, i32 0, i32 5
  %119 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %118, align 8
  %120 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %119, i32 0, i32 0
  store i8* %116, i8** %120, align 8
  %121 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %124 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %123, i32 0, i32 5
  %125 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %124, align 8
  %126 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %125, i32 0, i32 1
  store i64 %122, i64* %126, align 8
  %127 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %12, i32 0, i32 2
  %128 = load i32, i32* %127, align 8
  %129 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %130 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %129, i32 0, i32 72
  store i32 %128, i32* %130, align 4
  %131 = load i64, i64* %10, align 8
  %132 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %133 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %132, i32 0, i32 1
  %134 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %133, i32 0, i32 0
  store i64 %131, i64* %134, align 8
  %135 = load i32, i32* %11, align 4
  %136 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %137 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %136, i32 0, i32 1
  %138 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %137, i32 0, i32 1
  store i32 %135, i32* %138, align 8
  %139 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %140 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %139, i32 0, i32 3
  %141 = load i32, i32* %140, align 4
  %142 = add i32 %141, -1
  store i32 %142, i32* %140, align 4
  store i32 1, i32* %3, align 4
  br label %143

143:                                              ; preds = %114, %87, %34
  %144 = load i32, i32* %3, align 4
  ret i32 %144
}

; Function Attrs: noinline nounwind optnone ssp uwtable
declare hidden i32 @process_restart.46(%struct.jpeg_decompress_struct.424*) #1

attributes #0 = { argmemonly nofree nounwind willreturn }
attributes #1 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project/ 24c8eaec9467b2aaf70b0db33a4e4dd415139a50)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
