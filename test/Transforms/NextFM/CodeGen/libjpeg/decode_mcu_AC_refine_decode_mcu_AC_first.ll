; AUTOMATICALLY GENERATED BY tools/llvm-nextfm-remark/compare-mergesize.rb
;
; RUN: %opt -S --passes="multiple-func-merging" --multiple-func-merging-only=decode_mcu_AC_refine --multiple-func-merging-only=decode_mcu_AC_first -o %t.mfm.ll %s
; RUN: %opt -S --passes="func-merging" --func-merging-only=decode_mcu_AC_refine --func-merging-only=decode_mcu_AC_first -o %t.fm.ll %s
; RUN: %llc --filetype=obj %t.mfm.ll -o %t.mfm.o
; RUN: %llc --filetype=obj %t.fm.ll -o %t.fm.o
; RUN: %strip %t.mfm.o
; RUN: %strip %t.fm.o
; RUN: [[ $(stat -c%%s %t.mfm.o) -le $(stat -c%%s %t.fm.o) ]]
; XFAIL: *

; ModuleID = '../benchmarks/mibench/consumer/jpeg/cjpeg.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bitread_working_state = type { i8*, i64, i32, i64, i32, %struct.jpeg_decompress_struct*, i32* }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type { i8**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_sarray_control*, %struct.backing_store_struct }
%struct.backing_store_struct = type { void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*)*, %struct._IO_FILE*, [64 x i8] }
%struct.jpeg_common_struct.775 = type { %struct.jpeg_error_mgr.766*, %struct.jpeg_memory_mgr.773*, %struct.jpeg_progress_mgr*, i32, i32 }
%struct.jpeg_error_mgr.766 = type { {}*, void (%struct.jpeg_common_struct.775*, i32)*, {}*, void (%struct.jpeg_common_struct.775*, i8*)*, {}*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_memory_mgr.773 = type { i8* (%struct.jpeg_common_struct.775*, i32, i64)*, i8* (%struct.jpeg_common_struct.775*, i32, i64)*, i8** (%struct.jpeg_common_struct.775*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct.775*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct.775*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct.775*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct.775*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct.775*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct.775*, i32)*, {}*, i64 }
%struct.jvirt_barray_control = type { [64 x i16]**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_barray_control*, %struct.backing_store_struct }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, [16 x i32 (%struct.jpeg_decompress_struct*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.d_derived_tbl = type { [17 x i64], [18 x i64], [17 x i32], %struct.JHUFF_TBL*, [256 x i32], [256 x i8] }
%struct.jpeg_decompress_struct.424 = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr.409*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master.413*, %struct.jpeg_d_main_controller.414*, %struct.jpeg_d_coef_controller.415*, %struct.jpeg_d_post_controller.416*, %struct.jpeg_input_controller.417*, %struct.jpeg_marker_reader.418*, %struct.jpeg_entropy_decoder.419*, %struct.jpeg_inverse_dct.420*, %struct.jpeg_upsampler.421*, %struct.jpeg_color_deconverter.422*, %struct.jpeg_color_quantizer.423* }
%struct.jpeg_source_mgr.409 = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct.424*)*, void (%struct.jpeg_decompress_struct.424*, i64)*, i32 (%struct.jpeg_decompress_struct.424*, i32)*, {}* }
%struct.jpeg_decomp_master.413 = type { {}*, {}*, i32 }
%struct.jpeg_d_main_controller.414 = type { void (%struct.jpeg_decompress_struct.424*, i32)*, void (%struct.jpeg_decompress_struct.424*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller.415 = type { {}*, i32 (%struct.jpeg_decompress_struct.424*)*, {}*, i32 (%struct.jpeg_decompress_struct.424*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller.416 = type { void (%struct.jpeg_decompress_struct.424*, i32)*, void (%struct.jpeg_decompress_struct.424*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller.417 = type { i32 (%struct.jpeg_decompress_struct.424*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader.418 = type { {}*, i32 (%struct.jpeg_decompress_struct.424*)*, i32 (%struct.jpeg_decompress_struct.424*)*, i32 (%struct.jpeg_decompress_struct.424*)*, [16 x i32 (%struct.jpeg_decompress_struct.424*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder.419 = type { {}*, i32 (%struct.jpeg_decompress_struct.424*, [64 x i16]**)* }
%struct.jpeg_inverse_dct.420 = type { {}*, [10 x void (%struct.jpeg_decompress_struct.424*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler.421 = type { {}*, void (%struct.jpeg_decompress_struct.424*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter.422 = type { {}*, void (%struct.jpeg_decompress_struct.424*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer.423 = type { void (%struct.jpeg_decompress_struct.424*, i32)*, void (%struct.jpeg_decompress_struct.424*, i8**, i8**, i32)*, {}*, {}* }
%struct.phuff_entropy_decoder = type { %struct.jpeg_entropy_decoder.419, %struct.bitread_perm_state, %struct.savable_state.614, i32, [4 x %struct.d_derived_tbl*], %struct.d_derived_tbl* }
%struct.bitread_perm_state = type { i64, i32, i32 }
%struct.savable_state.614 = type { i32, [4 x i32] }
%struct.bitread_working_state.612 = type { i8*, i64, i32, i64, i32, %struct.jpeg_decompress_struct.424*, i32* }

@extend_test.47 = external hidden constant [16 x i32], align 16
@extend_offset.48 = external hidden constant [16 x i32], align 16
@jpeg_natural_order = external constant [80 x i32], align 16

; Function Attrs: noinline nounwind optnone ssp uwtable
declare i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*, i64, i32, i32) #0

; Function Attrs: noinline nounwind optnone ssp uwtable
declare i32 @jpeg_huff_decode(%struct.bitread_working_state*, i64, i32, %struct.d_derived_tbl*, i32) #0

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @decode_mcu_AC_first(%struct.jpeg_decompress_struct.424* %0, [64 x i16]** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.jpeg_decompress_struct.424*, align 8
  %5 = alloca [64 x i16]**, align 8
  %6 = alloca %struct.phuff_entropy_decoder*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [64 x i16]*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca %struct.bitread_working_state.612, align 8
  %17 = alloca %struct.d_derived_tbl*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store %struct.jpeg_decompress_struct.424* %0, %struct.jpeg_decompress_struct.424** %4, align 8
  store [64 x i16]** %1, [64 x i16]*** %5, align 8
  %20 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %20, i32 0, i32 79
  %22 = load %struct.jpeg_entropy_decoder.419*, %struct.jpeg_entropy_decoder.419** %21, align 8
  %23 = bitcast %struct.jpeg_entropy_decoder.419* %22 to %struct.phuff_entropy_decoder*
  store %struct.phuff_entropy_decoder* %23, %struct.phuff_entropy_decoder** %6, align 8
  %24 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %24, i32 0, i32 69
  %26 = load i32, i32* %25, align 8
  store i32 %26, i32* %7, align 4
  %27 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %27, i32 0, i32 71
  %29 = load i32, i32* %28, align 8
  store i32 %29, i32* %8, align 4
  %30 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %31 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %30, i32 0, i32 49
  %32 = load i32, i32* %31, align 8
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %46

34:                                               ; preds = %2
  %35 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %36 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %35, i32 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %45

39:                                               ; preds = %34
  %40 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %41 = call i32 @process_restart.46(%struct.jpeg_decompress_struct.424* %40)
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %39
  store i32 0, i32* %3, align 4
  br label %308

44:                                               ; preds = %39
  br label %45

45:                                               ; preds = %44, %34
  br label %46

46:                                               ; preds = %45, %2
  %47 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %48 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %47, i32 0, i32 2
  %49 = getelementptr inbounds %struct.savable_state.614, %struct.savable_state.614* %48, i32 0, i32 0
  %50 = load i32, i32* %49, align 8
  store i32 %50, i32* %12, align 4
  %51 = load i32, i32* %12, align 4
  %52 = icmp ugt i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %46
  %54 = load i32, i32* %12, align 4
  %55 = add i32 %54, -1
  store i32 %55, i32* %12, align 4
  br label %299

56:                                               ; preds = %46
  %57 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %58 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 5
  store %struct.jpeg_decompress_struct.424* %57, %struct.jpeg_decompress_struct.424** %58, align 8
  %59 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %60 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %59, i32 0, i32 5
  %61 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %60, align 8
  %62 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 0
  store i8* %63, i8** %64, align 8
  %65 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %65, i32 0, i32 5
  %67 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %66, align 8
  %68 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %67, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 1
  store i64 %69, i64* %70, align 8
  %71 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %71, i32 0, i32 72
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 2
  store i32 %73, i32* %74, align 8
  %75 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %76 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %75, i32 0, i32 1
  %77 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %76, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %14, align 8
  %79 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %80 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %79, i32 0, i32 1
  %81 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %80, i32 0, i32 1
  %82 = load i32, i32* %81, align 8
  store i32 %82, i32* %15, align 4
  %83 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %84 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %83, i32 0, i32 1
  %85 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %84, i32 0, i32 2
  %86 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 6
  store i32* %85, i32** %86, align 8
  %87 = load [64 x i16]**, [64 x i16]*** %5, align 8
  %88 = getelementptr inbounds [64 x i16]*, [64 x i16]** %87, i64 0
  %89 = load [64 x i16]*, [64 x i16]** %88, align 8
  store [64 x i16]* %89, [64 x i16]** %13, align 8
  %90 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %91 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %90, i32 0, i32 5
  %92 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %91, align 8
  store %struct.d_derived_tbl* %92, %struct.d_derived_tbl** %17, align 8
  %93 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %94 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %93, i32 0, i32 68
  %95 = load i32, i32* %94, align 4
  store i32 %95, i32* %10, align 4
  br label %96

96:                                               ; preds = %271, %56
  %97 = load i32, i32* %10, align 4
  %98 = load i32, i32* %7, align 4
  %99 = icmp sle i32 %97, %98
  br i1 %99, label %100, label %274

100:                                              ; preds = %96
  %101 = load i32, i32* %15, align 4
  %102 = icmp slt i32 %101, 8
  br i1 %102, label %103, label %118

103:                                              ; preds = %100
  %104 = load i64, i64* %14, align 8
  %105 = load i32, i32* %15, align 4
  %106 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %16, i64 %104, i32 %105, i32 0)
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %109, label %108

108:                                              ; preds = %103
  store i32 0, i32* %3, align 4
  br label %308

109:                                              ; preds = %103
  %110 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 3
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %14, align 8
  %112 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 4
  %113 = load i32, i32* %112, align 8
  store i32 %113, i32* %15, align 4
  %114 = load i32, i32* %15, align 4
  %115 = icmp slt i32 %114, 8
  br i1 %115, label %116, label %117

116:                                              ; preds = %109
  store i32 1, i32* %18, align 4
  br label %145

117:                                              ; preds = %109
  br label %118

118:                                              ; preds = %117, %100
  %119 = load i64, i64* %14, align 8
  %120 = load i32, i32* %15, align 4
  %121 = sub nsw i32 %120, 8
  %122 = zext i32 %121 to i64
  %123 = ashr i64 %119, %122
  %124 = trunc i64 %123 to i32
  %125 = and i32 %124, 255
  store i32 %125, i32* %19, align 4
  %126 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %17, align 8
  %127 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %126, i32 0, i32 4
  %128 = load i32, i32* %19, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [256 x i32], [256 x i32]* %127, i64 0, i64 %129
  %131 = load i32, i32* %130, align 4
  store i32 %131, i32* %18, align 4
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %144

133:                                              ; preds = %118
  %134 = load i32, i32* %18, align 4
  %135 = load i32, i32* %15, align 4
  %136 = sub nsw i32 %135, %134
  store i32 %136, i32* %15, align 4
  %137 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %17, align 8
  %138 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %137, i32 0, i32 5
  %139 = load i32, i32* %19, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds [256 x i8], [256 x i8]* %138, i64 0, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  store i32 %143, i32* %9, align 4
  br label %158

144:                                              ; preds = %118
  store i32 9, i32* %18, align 4
  br label %145

145:                                              ; preds = %144, %116
  %146 = load i64, i64* %14, align 8
  %147 = load i32, i32* %15, align 4
  %148 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %17, align 8
  %149 = load i32, i32* %18, align 4
  %150 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, %struct.d_derived_tbl*, i32)* @jpeg_huff_decode to i32 (%struct.bitread_working_state.612*, i64, i32, %struct.d_derived_tbl*, i32)*)(%struct.bitread_working_state.612* %16, i64 %146, i32 %147, %struct.d_derived_tbl* %148, i32 %149)
  store i32 %150, i32* %9, align 4
  %151 = icmp slt i32 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %145
  store i32 0, i32* %3, align 4
  br label %308

153:                                              ; preds = %145
  %154 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 3
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %14, align 8
  %156 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 4
  %157 = load i32, i32* %156, align 8
  store i32 %157, i32* %15, align 4
  br label %158

158:                                              ; preds = %153, %133
  %159 = load i32, i32* %9, align 4
  %160 = ashr i32 %159, 4
  store i32 %160, i32* %11, align 4
  %161 = load i32, i32* %9, align 4
  %162 = and i32 %161, 15
  store i32 %162, i32* %9, align 4
  %163 = load i32, i32* %9, align 4
  %164 = icmp ne i32 %163, 0
  br i1 %164, label %165, label %224

165:                                              ; preds = %158
  %166 = load i32, i32* %11, align 4
  %167 = load i32, i32* %10, align 4
  %168 = add nsw i32 %167, %166
  store i32 %168, i32* %10, align 4
  %169 = load i32, i32* %15, align 4
  %170 = load i32, i32* %9, align 4
  %171 = icmp slt i32 %169, %170
  br i1 %171, label %172, label %184

172:                                              ; preds = %165
  %173 = load i64, i64* %14, align 8
  %174 = load i32, i32* %15, align 4
  %175 = load i32, i32* %9, align 4
  %176 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %16, i64 %173, i32 %174, i32 %175)
  %177 = icmp ne i32 %176, 0
  br i1 %177, label %179, label %178

178:                                              ; preds = %172
  store i32 0, i32* %3, align 4
  br label %308

179:                                              ; preds = %172
  %180 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 3
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %14, align 8
  %182 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 4
  %183 = load i32, i32* %182, align 8
  store i32 %183, i32* %15, align 4
  br label %184

184:                                              ; preds = %179, %165
  %185 = load i64, i64* %14, align 8
  %186 = load i32, i32* %9, align 4
  %187 = load i32, i32* %15, align 4
  %188 = sub nsw i32 %187, %186
  store i32 %188, i32* %15, align 4
  %189 = zext i32 %188 to i64
  %190 = ashr i64 %185, %189
  %191 = trunc i64 %190 to i32
  %192 = load i32, i32* %9, align 4
  %193 = shl i32 1, %192
  %194 = sub nsw i32 %193, 1
  %195 = and i32 %191, %194
  store i32 %195, i32* %11, align 4
  %196 = load i32, i32* %11, align 4
  %197 = load i32, i32* %9, align 4
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds [16 x i32], [16 x i32]* @extend_test.47, i64 0, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = icmp slt i32 %196, %200
  br i1 %201, label %202, label %209

202:                                              ; preds = %184
  %203 = load i32, i32* %11, align 4
  %204 = load i32, i32* %9, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [16 x i32], [16 x i32]* @extend_offset.48, i64 0, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = add nsw i32 %203, %207
  br label %211

209:                                              ; preds = %184
  %210 = load i32, i32* %11, align 4
  br label %211

211:                                              ; preds = %209, %202
  %212 = phi i32 [ %208, %202 ], [ %210, %209 ]
  store i32 %212, i32* %9, align 4
  %213 = load i32, i32* %9, align 4
  %214 = load i32, i32* %8, align 4
  %215 = shl i32 %213, %214
  %216 = trunc i32 %215 to i16
  %217 = load [64 x i16]*, [64 x i16]** %13, align 8
  %218 = load i32, i32* %10, align 4
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([80 x i32]* @jpeg_natural_order to [0 x i32]*), i64 0, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds [64 x i16], [64 x i16]* %217, i64 0, i64 %222
  store i16 %216, i16* %223, align 2
  br label %270

224:                                              ; preds = %158
  %225 = load i32, i32* %11, align 4
  %226 = icmp eq i32 %225, 15
  br i1 %226, label %227, label %230

227:                                              ; preds = %224
  %228 = load i32, i32* %10, align 4
  %229 = add nsw i32 %228, 15
  store i32 %229, i32* %10, align 4
  br label %269

230:                                              ; preds = %224
  %231 = load i32, i32* %11, align 4
  %232 = shl i32 1, %231
  store i32 %232, i32* %12, align 4
  %233 = load i32, i32* %11, align 4
  %234 = icmp ne i32 %233, 0
  br i1 %234, label %235, label %266

235:                                              ; preds = %230
  %236 = load i32, i32* %15, align 4
  %237 = load i32, i32* %11, align 4
  %238 = icmp slt i32 %236, %237
  br i1 %238, label %239, label %251

239:                                              ; preds = %235
  %240 = load i64, i64* %14, align 8
  %241 = load i32, i32* %15, align 4
  %242 = load i32, i32* %11, align 4
  %243 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %16, i64 %240, i32 %241, i32 %242)
  %244 = icmp ne i32 %243, 0
  br i1 %244, label %246, label %245

245:                                              ; preds = %239
  store i32 0, i32* %3, align 4
  br label %308

246:                                              ; preds = %239
  %247 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 3
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %14, align 8
  %249 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 4
  %250 = load i32, i32* %249, align 8
  store i32 %250, i32* %15, align 4
  br label %251

251:                                              ; preds = %246, %235
  %252 = load i64, i64* %14, align 8
  %253 = load i32, i32* %11, align 4
  %254 = load i32, i32* %15, align 4
  %255 = sub nsw i32 %254, %253
  store i32 %255, i32* %15, align 4
  %256 = zext i32 %255 to i64
  %257 = ashr i64 %252, %256
  %258 = trunc i64 %257 to i32
  %259 = load i32, i32* %11, align 4
  %260 = shl i32 1, %259
  %261 = sub nsw i32 %260, 1
  %262 = and i32 %258, %261
  store i32 %262, i32* %11, align 4
  %263 = load i32, i32* %11, align 4
  %264 = load i32, i32* %12, align 4
  %265 = add i32 %264, %263
  store i32 %265, i32* %12, align 4
  br label %266

266:                                              ; preds = %251, %230
  %267 = load i32, i32* %12, align 4
  %268 = add i32 %267, -1
  store i32 %268, i32* %12, align 4
  br label %274

269:                                              ; preds = %227
  br label %270

270:                                              ; preds = %269, %211
  br label %271

271:                                              ; preds = %270
  %272 = load i32, i32* %10, align 4
  %273 = add nsw i32 %272, 1
  store i32 %273, i32* %10, align 4
  br label %96, !llvm.loop !7

274:                                              ; preds = %266, %96
  %275 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 0
  %276 = load i8*, i8** %275, align 8
  %277 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %278 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %277, i32 0, i32 5
  %279 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %278, align 8
  %280 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %279, i32 0, i32 0
  store i8* %276, i8** %280, align 8
  %281 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 1
  %282 = load i64, i64* %281, align 8
  %283 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %284 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %283, i32 0, i32 5
  %285 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %284, align 8
  %286 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %285, i32 0, i32 1
  store i64 %282, i64* %286, align 8
  %287 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %16, i32 0, i32 2
  %288 = load i32, i32* %287, align 8
  %289 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %290 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %289, i32 0, i32 72
  store i32 %288, i32* %290, align 4
  %291 = load i64, i64* %14, align 8
  %292 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %293 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %292, i32 0, i32 1
  %294 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %293, i32 0, i32 0
  store i64 %291, i64* %294, align 8
  %295 = load i32, i32* %15, align 4
  %296 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %297 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %296, i32 0, i32 1
  %298 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %297, i32 0, i32 1
  store i32 %295, i32* %298, align 8
  br label %299

299:                                              ; preds = %274, %53
  %300 = load i32, i32* %12, align 4
  %301 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %302 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %301, i32 0, i32 2
  %303 = getelementptr inbounds %struct.savable_state.614, %struct.savable_state.614* %302, i32 0, i32 0
  store i32 %300, i32* %303, align 8
  %304 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %305 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %304, i32 0, i32 3
  %306 = load i32, i32* %305, align 4
  %307 = add i32 %306, -1
  store i32 %307, i32* %305, align 4
  store i32 1, i32* %3, align 4
  br label %308

308:                                              ; preds = %299, %245, %178, %152, %108, %43
  %309 = load i32, i32* %3, align 4
  ret i32 %309
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @decode_mcu_AC_refine(%struct.jpeg_decompress_struct.424* %0, [64 x i16]** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.jpeg_decompress_struct.424*, align 8
  %5 = alloca [64 x i16]**, align 8
  %6 = alloca %struct.phuff_entropy_decoder*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [64 x i16]*, align 8
  %15 = alloca i16*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.bitread_working_state.612, align 8
  %19 = alloca %struct.d_derived_tbl*, align 8
  %20 = alloca i32, align 4
  %21 = alloca [64 x i32], align 16
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  store %struct.jpeg_decompress_struct.424* %0, %struct.jpeg_decompress_struct.424** %4, align 8
  store [64 x i16]** %1, [64 x i16]*** %5, align 8
  %25 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %25, i32 0, i32 79
  %27 = load %struct.jpeg_entropy_decoder.419*, %struct.jpeg_entropy_decoder.419** %26, align 8
  %28 = bitcast %struct.jpeg_entropy_decoder.419* %27 to %struct.phuff_entropy_decoder*
  store %struct.phuff_entropy_decoder* %28, %struct.phuff_entropy_decoder** %6, align 8
  %29 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %29, i32 0, i32 69
  %31 = load i32, i32* %30, align 8
  store i32 %31, i32* %7, align 4
  %32 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %32, i32 0, i32 71
  %34 = load i32, i32* %33, align 8
  %35 = shl i32 1, %34
  store i32 %35, i32* %8, align 4
  %36 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %36, i32 0, i32 71
  %38 = load i32, i32* %37, align 8
  %39 = shl i32 -1, %38
  store i32 %39, i32* %9, align 4
  %40 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %40, i32 0, i32 49
  %42 = load i32, i32* %41, align 8
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %2
  %45 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %46 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %45, i32 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %55

49:                                               ; preds = %44
  %50 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %51 = call i32 @process_restart.46(%struct.jpeg_decompress_struct.424* %50)
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  store i32 0, i32* %3, align 4
  br label %486

54:                                               ; preds = %49
  br label %55

55:                                               ; preds = %54, %44
  br label %56

56:                                               ; preds = %55, %2
  %57 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %58 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 5
  store %struct.jpeg_decompress_struct.424* %57, %struct.jpeg_decompress_struct.424** %58, align 8
  %59 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %60 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %59, i32 0, i32 5
  %61 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %60, align 8
  %62 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 0
  store i8* %63, i8** %64, align 8
  %65 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %65, i32 0, i32 5
  %67 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %66, align 8
  %68 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %67, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 1
  store i64 %69, i64* %70, align 8
  %71 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %71, i32 0, i32 72
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 2
  store i32 %73, i32* %74, align 8
  %75 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %76 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %75, i32 0, i32 1
  %77 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %76, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %16, align 8
  %79 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %80 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %79, i32 0, i32 1
  %81 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %80, i32 0, i32 1
  %82 = load i32, i32* %81, align 8
  store i32 %82, i32* %17, align 4
  %83 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %84 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %83, i32 0, i32 1
  %85 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %84, i32 0, i32 2
  %86 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 6
  store i32* %85, i32** %86, align 8
  %87 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %88 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %87, i32 0, i32 2
  %89 = getelementptr inbounds %struct.savable_state.614, %struct.savable_state.614* %88, i32 0, i32 0
  %90 = load i32, i32* %89, align 8
  store i32 %90, i32* %13, align 4
  %91 = load [64 x i16]**, [64 x i16]*** %5, align 8
  %92 = getelementptr inbounds [64 x i16]*, [64 x i16]** %91, i64 0
  %93 = load [64 x i16]*, [64 x i16]** %92, align 8
  store [64 x i16]* %93, [64 x i16]** %14, align 8
  %94 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %95 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %94, i32 0, i32 5
  %96 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %95, align 8
  store %struct.d_derived_tbl* %96, %struct.d_derived_tbl** %19, align 8
  store i32 0, i32* %20, align 4
  %97 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %98 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %97, i32 0, i32 68
  %99 = load i32, i32* %98, align 4
  store i32 %99, i32* %11, align 4
  %100 = load i32, i32* %13, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %359

102:                                              ; preds = %56
  br label %103

103:                                              ; preds = %355, %102
  %104 = load i32, i32* %11, align 4
  %105 = load i32, i32* %7, align 4
  %106 = icmp sle i32 %104, %105
  br i1 %106, label %107, label %358

107:                                              ; preds = %103
  %108 = load i32, i32* %17, align 4
  %109 = icmp slt i32 %108, 8
  br i1 %109, label %110, label %125

110:                                              ; preds = %107
  %111 = load i64, i64* %16, align 8
  %112 = load i32, i32* %17, align 4
  %113 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %18, i64 %111, i32 %112, i32 0)
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %116, label %115

115:                                              ; preds = %110
  br label %472

116:                                              ; preds = %110
  %117 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 3
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %16, align 8
  %119 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 4
  %120 = load i32, i32* %119, align 8
  store i32 %120, i32* %17, align 4
  %121 = load i32, i32* %17, align 4
  %122 = icmp slt i32 %121, 8
  br i1 %122, label %123, label %124

123:                                              ; preds = %116
  store i32 1, i32* %22, align 4
  br label %152

124:                                              ; preds = %116
  br label %125

125:                                              ; preds = %124, %107
  %126 = load i64, i64* %16, align 8
  %127 = load i32, i32* %17, align 4
  %128 = sub nsw i32 %127, 8
  %129 = zext i32 %128 to i64
  %130 = ashr i64 %126, %129
  %131 = trunc i64 %130 to i32
  %132 = and i32 %131, 255
  store i32 %132, i32* %23, align 4
  %133 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %19, align 8
  %134 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %133, i32 0, i32 4
  %135 = load i32, i32* %23, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [256 x i32], [256 x i32]* %134, i64 0, i64 %136
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %22, align 4
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %140, label %151

140:                                              ; preds = %125
  %141 = load i32, i32* %22, align 4
  %142 = load i32, i32* %17, align 4
  %143 = sub nsw i32 %142, %141
  store i32 %143, i32* %17, align 4
  %144 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %19, align 8
  %145 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %144, i32 0, i32 5
  %146 = load i32, i32* %23, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [256 x i8], [256 x i8]* %145, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  store i32 %150, i32* %10, align 4
  br label %165

151:                                              ; preds = %125
  store i32 9, i32* %22, align 4
  br label %152

152:                                              ; preds = %151, %123
  %153 = load i64, i64* %16, align 8
  %154 = load i32, i32* %17, align 4
  %155 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %19, align 8
  %156 = load i32, i32* %22, align 4
  %157 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, %struct.d_derived_tbl*, i32)* @jpeg_huff_decode to i32 (%struct.bitread_working_state.612*, i64, i32, %struct.d_derived_tbl*, i32)*)(%struct.bitread_working_state.612* %18, i64 %153, i32 %154, %struct.d_derived_tbl* %155, i32 %156)
  store i32 %157, i32* %10, align 4
  %158 = icmp slt i32 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %152
  br label %472

160:                                              ; preds = %152
  %161 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 3
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %16, align 8
  %163 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 4
  %164 = load i32, i32* %163, align 8
  store i32 %164, i32* %17, align 4
  br label %165

165:                                              ; preds = %160, %140
  %166 = load i32, i32* %10, align 4
  %167 = ashr i32 %166, 4
  store i32 %167, i32* %12, align 4
  %168 = load i32, i32* %10, align 4
  %169 = and i32 %168, 15
  store i32 %169, i32* %10, align 4
  %170 = load i32, i32* %10, align 4
  %171 = icmp ne i32 %170, 0
  br i1 %171, label %172, label %215

172:                                              ; preds = %165
  %173 = load i32, i32* %10, align 4
  %174 = icmp ne i32 %173, 1
  br i1 %174, label %175, label %187

175:                                              ; preds = %172
  %176 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %177 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %176, i32 0, i32 0
  %178 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %177, align 8
  %179 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %178, i32 0, i32 5
  store i32 114, i32* %179, align 8
  %180 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %181 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %180, i32 0, i32 0
  %182 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %181, align 8
  %183 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %182, i32 0, i32 1
  %184 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %183, align 8
  %185 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %186 = bitcast %struct.jpeg_decompress_struct.424* %185 to %struct.jpeg_common_struct*
  call void %184(%struct.jpeg_common_struct* %186, i32 -1)
  br label %187

187:                                              ; preds = %175, %172
  %188 = load i32, i32* %17, align 4
  %189 = icmp slt i32 %188, 1
  br i1 %189, label %190, label %201

190:                                              ; preds = %187
  %191 = load i64, i64* %16, align 8
  %192 = load i32, i32* %17, align 4
  %193 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %18, i64 %191, i32 %192, i32 1)
  %194 = icmp ne i32 %193, 0
  br i1 %194, label %196, label %195

195:                                              ; preds = %190
  br label %472

196:                                              ; preds = %190
  %197 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 3
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %16, align 8
  %199 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 4
  %200 = load i32, i32* %199, align 8
  store i32 %200, i32* %17, align 4
  br label %201

201:                                              ; preds = %196, %187
  %202 = load i64, i64* %16, align 8
  %203 = load i32, i32* %17, align 4
  %204 = sub nsw i32 %203, 1
  store i32 %204, i32* %17, align 4
  %205 = zext i32 %204 to i64
  %206 = ashr i64 %202, %205
  %207 = trunc i64 %206 to i32
  %208 = and i32 %207, 1
  %209 = icmp ne i32 %208, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %201
  %211 = load i32, i32* %8, align 4
  store i32 %211, i32* %10, align 4
  br label %214

212:                                              ; preds = %201
  %213 = load i32, i32* %9, align 4
  store i32 %213, i32* %10, align 4
  br label %214

214:                                              ; preds = %212, %210
  br label %256

215:                                              ; preds = %165
  %216 = load i32, i32* %12, align 4
  %217 = icmp ne i32 %216, 15
  br i1 %217, label %218, label %255

218:                                              ; preds = %215
  %219 = load i32, i32* %12, align 4
  %220 = shl i32 1, %219
  store i32 %220, i32* %13, align 4
  %221 = load i32, i32* %12, align 4
  %222 = icmp ne i32 %221, 0
  br i1 %222, label %223, label %254

223:                                              ; preds = %218
  %224 = load i32, i32* %17, align 4
  %225 = load i32, i32* %12, align 4
  %226 = icmp slt i32 %224, %225
  br i1 %226, label %227, label %239

227:                                              ; preds = %223
  %228 = load i64, i64* %16, align 8
  %229 = load i32, i32* %17, align 4
  %230 = load i32, i32* %12, align 4
  %231 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %18, i64 %228, i32 %229, i32 %230)
  %232 = icmp ne i32 %231, 0
  br i1 %232, label %234, label %233

233:                                              ; preds = %227
  br label %472

234:                                              ; preds = %227
  %235 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 3
  %236 = load i64, i64* %235, align 8
  store i64 %236, i64* %16, align 8
  %237 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 4
  %238 = load i32, i32* %237, align 8
  store i32 %238, i32* %17, align 4
  br label %239

239:                                              ; preds = %234, %223
  %240 = load i64, i64* %16, align 8
  %241 = load i32, i32* %12, align 4
  %242 = load i32, i32* %17, align 4
  %243 = sub nsw i32 %242, %241
  store i32 %243, i32* %17, align 4
  %244 = zext i32 %243 to i64
  %245 = ashr i64 %240, %244
  %246 = trunc i64 %245 to i32
  %247 = load i32, i32* %12, align 4
  %248 = shl i32 1, %247
  %249 = sub nsw i32 %248, 1
  %250 = and i32 %246, %249
  store i32 %250, i32* %12, align 4
  %251 = load i32, i32* %12, align 4
  %252 = load i32, i32* %13, align 4
  %253 = add i32 %252, %251
  store i32 %253, i32* %13, align 4
  br label %254

254:                                              ; preds = %239, %218
  br label %358

255:                                              ; preds = %215
  br label %256

256:                                              ; preds = %255, %214
  br label %257

257:                                              ; preds = %331, %256
  %258 = load [64 x i16]*, [64 x i16]** %14, align 8
  %259 = getelementptr inbounds [64 x i16], [64 x i16]* %258, i64 0, i64 0
  %260 = load i32, i32* %11, align 4
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([80 x i32]* @jpeg_natural_order to [0 x i32]*), i64 0, i64 %261
  %263 = load i32, i32* %262, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds i16, i16* %259, i64 %264
  store i16* %265, i16** %15, align 8
  %266 = load i16*, i16** %15, align 8
  %267 = load i16, i16* %266, align 2
  %268 = sext i16 %267 to i32
  %269 = icmp ne i32 %268, 0
  br i1 %269, label %270, label %322

270:                                              ; preds = %257
  %271 = load i32, i32* %17, align 4
  %272 = icmp slt i32 %271, 1
  br i1 %272, label %273, label %284

273:                                              ; preds = %270
  %274 = load i64, i64* %16, align 8
  %275 = load i32, i32* %17, align 4
  %276 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %18, i64 %274, i32 %275, i32 1)
  %277 = icmp ne i32 %276, 0
  br i1 %277, label %279, label %278

278:                                              ; preds = %273
  br label %472

279:                                              ; preds = %273
  %280 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 3
  %281 = load i64, i64* %280, align 8
  store i64 %281, i64* %16, align 8
  %282 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 4
  %283 = load i32, i32* %282, align 8
  store i32 %283, i32* %17, align 4
  br label %284

284:                                              ; preds = %279, %270
  %285 = load i64, i64* %16, align 8
  %286 = load i32, i32* %17, align 4
  %287 = sub nsw i32 %286, 1
  store i32 %287, i32* %17, align 4
  %288 = zext i32 %287 to i64
  %289 = ashr i64 %285, %288
  %290 = trunc i64 %289 to i32
  %291 = and i32 %290, 1
  %292 = icmp ne i32 %291, 0
  br i1 %292, label %293, label %321

293:                                              ; preds = %284
  %294 = load i16*, i16** %15, align 8
  %295 = load i16, i16* %294, align 2
  %296 = sext i16 %295 to i32
  %297 = load i32, i32* %8, align 4
  %298 = and i32 %296, %297
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %300, label %320

300:                                              ; preds = %293
  %301 = load i16*, i16** %15, align 8
  %302 = load i16, i16* %301, align 2
  %303 = sext i16 %302 to i32
  %304 = icmp sge i32 %303, 0
  br i1 %304, label %305, label %312

305:                                              ; preds = %300
  %306 = load i32, i32* %8, align 4
  %307 = load i16*, i16** %15, align 8
  %308 = load i16, i16* %307, align 2
  %309 = sext i16 %308 to i32
  %310 = add nsw i32 %309, %306
  %311 = trunc i32 %310 to i16
  store i16 %311, i16* %307, align 2
  br label %319

312:                                              ; preds = %300
  %313 = load i32, i32* %9, align 4
  %314 = load i16*, i16** %15, align 8
  %315 = load i16, i16* %314, align 2
  %316 = sext i16 %315 to i32
  %317 = add nsw i32 %316, %313
  %318 = trunc i32 %317 to i16
  store i16 %318, i16* %314, align 2
  br label %319

319:                                              ; preds = %312, %305
  br label %320

320:                                              ; preds = %319, %293
  br label %321

321:                                              ; preds = %320, %284
  br label %328

322:                                              ; preds = %257
  %323 = load i32, i32* %12, align 4
  %324 = add nsw i32 %323, -1
  store i32 %324, i32* %12, align 4
  %325 = icmp slt i32 %324, 0
  br i1 %325, label %326, label %327

326:                                              ; preds = %322
  br label %335

327:                                              ; preds = %322
  br label %328

328:                                              ; preds = %327, %321
  %329 = load i32, i32* %11, align 4
  %330 = add nsw i32 %329, 1
  store i32 %330, i32* %11, align 4
  br label %331

331:                                              ; preds = %328
  %332 = load i32, i32* %11, align 4
  %333 = load i32, i32* %7, align 4
  %334 = icmp sle i32 %332, %333
  br i1 %334, label %257, label %335, !llvm.loop !9

335:                                              ; preds = %331, %326
  %336 = load i32, i32* %10, align 4
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %354

338:                                              ; preds = %335
  %339 = load i32, i32* %11, align 4
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([80 x i32]* @jpeg_natural_order to [0 x i32]*), i64 0, i64 %340
  %342 = load i32, i32* %341, align 4
  store i32 %342, i32* %24, align 4
  %343 = load i32, i32* %10, align 4
  %344 = trunc i32 %343 to i16
  %345 = load [64 x i16]*, [64 x i16]** %14, align 8
  %346 = load i32, i32* %24, align 4
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [64 x i16], [64 x i16]* %345, i64 0, i64 %347
  store i16 %344, i16* %348, align 2
  %349 = load i32, i32* %24, align 4
  %350 = load i32, i32* %20, align 4
  %351 = add nsw i32 %350, 1
  store i32 %351, i32* %20, align 4
  %352 = sext i32 %350 to i64
  %353 = getelementptr inbounds [64 x i32], [64 x i32]* %21, i64 0, i64 %352
  store i32 %349, i32* %353, align 4
  br label %354

354:                                              ; preds = %338, %335
  br label %355

355:                                              ; preds = %354
  %356 = load i32, i32* %11, align 4
  %357 = add nsw i32 %356, 1
  store i32 %357, i32* %11, align 4
  br label %103, !llvm.loop !10

358:                                              ; preds = %254, %103
  br label %359

359:                                              ; preds = %358, %56
  %360 = load i32, i32* %13, align 4
  %361 = icmp ugt i32 %360, 0
  br i1 %361, label %362, label %439

362:                                              ; preds = %359
  br label %363

363:                                              ; preds = %433, %362
  %364 = load i32, i32* %11, align 4
  %365 = load i32, i32* %7, align 4
  %366 = icmp sle i32 %364, %365
  br i1 %366, label %367, label %436

367:                                              ; preds = %363
  %368 = load [64 x i16]*, [64 x i16]** %14, align 8
  %369 = getelementptr inbounds [64 x i16], [64 x i16]* %368, i64 0, i64 0
  %370 = load i32, i32* %11, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([80 x i32]* @jpeg_natural_order to [0 x i32]*), i64 0, i64 %371
  %373 = load i32, i32* %372, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds i16, i16* %369, i64 %374
  store i16* %375, i16** %15, align 8
  %376 = load i16*, i16** %15, align 8
  %377 = load i16, i16* %376, align 2
  %378 = sext i16 %377 to i32
  %379 = icmp ne i32 %378, 0
  br i1 %379, label %380, label %432

380:                                              ; preds = %367
  %381 = load i32, i32* %17, align 4
  %382 = icmp slt i32 %381, 1
  br i1 %382, label %383, label %394

383:                                              ; preds = %380
  %384 = load i64, i64* %16, align 8
  %385 = load i32, i32* %17, align 4
  %386 = call i32 bitcast (i32 (%struct.bitread_working_state*, i64, i32, i32)* @jpeg_fill_bit_buffer to i32 (%struct.bitread_working_state.612*, i64, i32, i32)*)(%struct.bitread_working_state.612* %18, i64 %384, i32 %385, i32 1)
  %387 = icmp ne i32 %386, 0
  br i1 %387, label %389, label %388

388:                                              ; preds = %383
  br label %472

389:                                              ; preds = %383
  %390 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 3
  %391 = load i64, i64* %390, align 8
  store i64 %391, i64* %16, align 8
  %392 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 4
  %393 = load i32, i32* %392, align 8
  store i32 %393, i32* %17, align 4
  br label %394

394:                                              ; preds = %389, %380
  %395 = load i64, i64* %16, align 8
  %396 = load i32, i32* %17, align 4
  %397 = sub nsw i32 %396, 1
  store i32 %397, i32* %17, align 4
  %398 = zext i32 %397 to i64
  %399 = ashr i64 %395, %398
  %400 = trunc i64 %399 to i32
  %401 = and i32 %400, 1
  %402 = icmp ne i32 %401, 0
  br i1 %402, label %403, label %431

403:                                              ; preds = %394
  %404 = load i16*, i16** %15, align 8
  %405 = load i16, i16* %404, align 2
  %406 = sext i16 %405 to i32
  %407 = load i32, i32* %8, align 4
  %408 = and i32 %406, %407
  %409 = icmp eq i32 %408, 0
  br i1 %409, label %410, label %430

410:                                              ; preds = %403
  %411 = load i16*, i16** %15, align 8
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = icmp sge i32 %413, 0
  br i1 %414, label %415, label %422

415:                                              ; preds = %410
  %416 = load i32, i32* %8, align 4
  %417 = load i16*, i16** %15, align 8
  %418 = load i16, i16* %417, align 2
  %419 = sext i16 %418 to i32
  %420 = add nsw i32 %419, %416
  %421 = trunc i32 %420 to i16
  store i16 %421, i16* %417, align 2
  br label %429

422:                                              ; preds = %410
  %423 = load i32, i32* %9, align 4
  %424 = load i16*, i16** %15, align 8
  %425 = load i16, i16* %424, align 2
  %426 = sext i16 %425 to i32
  %427 = add nsw i32 %426, %423
  %428 = trunc i32 %427 to i16
  store i16 %428, i16* %424, align 2
  br label %429

429:                                              ; preds = %422, %415
  br label %430

430:                                              ; preds = %429, %403
  br label %431

431:                                              ; preds = %430, %394
  br label %432

432:                                              ; preds = %431, %367
  br label %433

433:                                              ; preds = %432
  %434 = load i32, i32* %11, align 4
  %435 = add nsw i32 %434, 1
  store i32 %435, i32* %11, align 4
  br label %363, !llvm.loop !11

436:                                              ; preds = %363
  %437 = load i32, i32* %13, align 4
  %438 = add i32 %437, -1
  store i32 %438, i32* %13, align 4
  br label %439

439:                                              ; preds = %436, %359
  %440 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 0
  %441 = load i8*, i8** %440, align 8
  %442 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %443 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %442, i32 0, i32 5
  %444 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %443, align 8
  %445 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %444, i32 0, i32 0
  store i8* %441, i8** %445, align 8
  %446 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 1
  %447 = load i64, i64* %446, align 8
  %448 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %449 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %448, i32 0, i32 5
  %450 = load %struct.jpeg_source_mgr.409*, %struct.jpeg_source_mgr.409** %449, align 8
  %451 = getelementptr inbounds %struct.jpeg_source_mgr.409, %struct.jpeg_source_mgr.409* %450, i32 0, i32 1
  store i64 %447, i64* %451, align 8
  %452 = getelementptr inbounds %struct.bitread_working_state.612, %struct.bitread_working_state.612* %18, i32 0, i32 2
  %453 = load i32, i32* %452, align 8
  %454 = load %struct.jpeg_decompress_struct.424*, %struct.jpeg_decompress_struct.424** %4, align 8
  %455 = getelementptr inbounds %struct.jpeg_decompress_struct.424, %struct.jpeg_decompress_struct.424* %454, i32 0, i32 72
  store i32 %453, i32* %455, align 4
  %456 = load i64, i64* %16, align 8
  %457 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %458 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %457, i32 0, i32 1
  %459 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %458, i32 0, i32 0
  store i64 %456, i64* %459, align 8
  %460 = load i32, i32* %17, align 4
  %461 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %462 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %461, i32 0, i32 1
  %463 = getelementptr inbounds %struct.bitread_perm_state, %struct.bitread_perm_state* %462, i32 0, i32 1
  store i32 %460, i32* %463, align 8
  %464 = load i32, i32* %13, align 4
  %465 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %466 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %465, i32 0, i32 2
  %467 = getelementptr inbounds %struct.savable_state.614, %struct.savable_state.614* %466, i32 0, i32 0
  store i32 %464, i32* %467, align 8
  %468 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %469 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %468, i32 0, i32 3
  %470 = load i32, i32* %469, align 4
  %471 = add i32 %470, -1
  store i32 %471, i32* %469, align 4
  store i32 1, i32* %3, align 4
  br label %486

472:                                              ; preds = %388, %278, %233, %195, %159, %115
  br label %473

473:                                              ; preds = %476, %472
  %474 = load i32, i32* %20, align 4
  %475 = icmp sgt i32 %474, 0
  br i1 %475, label %476, label %485

476:                                              ; preds = %473
  %477 = load [64 x i16]*, [64 x i16]** %14, align 8
  %478 = load i32, i32* %20, align 4
  %479 = add nsw i32 %478, -1
  store i32 %479, i32* %20, align 4
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds [64 x i32], [64 x i32]* %21, i64 0, i64 %480
  %482 = load i32, i32* %481, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds [64 x i16], [64 x i16]* %477, i64 0, i64 %483
  store i16 0, i16* %484, align 2
  br label %473, !llvm.loop !12

485:                                              ; preds = %473
  store i32 0, i32* %3, align 4
  br label %486

486:                                              ; preds = %485, %439, %53
  %487 = load i32, i32* %3, align 4
  ret i32 %487
}

; Function Attrs: noinline nounwind optnone ssp uwtable
declare hidden i32 @process_restart.46(%struct.jpeg_decompress_struct.424*) #0

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project/ 24c8eaec9467b2aaf70b0db33a4e4dd415139a50)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !8}
