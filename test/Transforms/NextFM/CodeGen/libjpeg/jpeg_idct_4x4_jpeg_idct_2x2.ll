; AUTOMATICALLY GENERATED BY tools/llvm-nextfm-remark/compare-mergesize.rb
;
; RUN: %opt -S --passes="multiple-func-merging" --multiple-func-merging-only=jpeg_idct_4x4 --multiple-func-merging-only=jpeg_idct_2x2 -o %t.mfm.ll %s
; RUN: %opt -S --passes="func-merging" --func-merging-only=jpeg_idct_4x4 --func-merging-only=jpeg_idct_2x2 -o %t.fm.ll %s
; RUN: %llc --filetype=obj %t.mfm.ll -o %t.mfm.o
; RUN: %llc --filetype=obj %t.fm.ll -o %t.fm.o
; RUN: %strip %t.mfm.o
; RUN: %strip %t.fm.o
; RUN: [[ $(stat -c%%s %t.mfm.o) -le $(stat -c%%s %t.fm.o) ]]
; XFAIL: *

; ModuleID = '../benchmarks/mibench/consumer/jpeg/cjpeg.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct.764 = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr.749*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master.753*, %struct.jpeg_d_main_controller.754*, %struct.jpeg_d_coef_controller.755*, %struct.jpeg_d_post_controller.756*, %struct.jpeg_input_controller.757*, %struct.jpeg_marker_reader.758*, %struct.jpeg_entropy_decoder.759*, %struct.jpeg_inverse_dct.760*, %struct.jpeg_upsampler.761*, %struct.jpeg_color_deconverter.762*, %struct.jpeg_color_quantizer.763* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type { i8**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_sarray_control*, %struct.backing_store_struct }
%struct.backing_store_struct = type { void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*)*, %struct._IO_FILE*, [64 x i8] }
%struct.jpeg_common_struct.775 = type { %struct.jpeg_error_mgr.766*, %struct.jpeg_memory_mgr.773*, %struct.jpeg_progress_mgr*, i32, i32 }
%struct.jpeg_error_mgr.766 = type { {}*, void (%struct.jpeg_common_struct.775*, i32)*, {}*, void (%struct.jpeg_common_struct.775*, i8*)*, {}*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_memory_mgr.773 = type { i8* (%struct.jpeg_common_struct.775*, i32, i64)*, i8* (%struct.jpeg_common_struct.775*, i32, i64)*, i8** (%struct.jpeg_common_struct.775*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct.775*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct.775*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct.775*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct.775*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct.775*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct.775*, i32)*, {}*, i64 }
%struct.jvirt_barray_control = type { [64 x i16]**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_barray_control*, %struct.backing_store_struct }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr.749 = type { i8*, i64, void (%struct.jpeg_decompress_struct.764*)*, i32 (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*, i64)*, i32 (%struct.jpeg_decompress_struct.764*, i32)*, void (%struct.jpeg_decompress_struct.764*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_decomp_master.753 = type { void (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*)*, i32 }
%struct.jpeg_d_main_controller.754 = type { void (%struct.jpeg_decompress_struct.764*, i32)*, void (%struct.jpeg_decompress_struct.764*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller.755 = type { void (%struct.jpeg_decompress_struct.764*)*, i32 (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*)*, i32 (%struct.jpeg_decompress_struct.764*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller.756 = type { void (%struct.jpeg_decompress_struct.764*, i32)*, void (%struct.jpeg_decompress_struct.764*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller.757 = type { i32 (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*)*, i32, i32 }
%struct.jpeg_marker_reader.758 = type { void (%struct.jpeg_decompress_struct.764*)*, i32 (%struct.jpeg_decompress_struct.764*)*, i32 (%struct.jpeg_decompress_struct.764*)*, i32 (%struct.jpeg_decompress_struct.764*)*, [16 x i32 (%struct.jpeg_decompress_struct.764*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder.759 = type { void (%struct.jpeg_decompress_struct.764*)*, i32 (%struct.jpeg_decompress_struct.764*, [64 x i16]**)* }
%struct.jpeg_inverse_dct.760 = type { void (%struct.jpeg_decompress_struct.764*)*, [10 x {}*] }
%struct.jpeg_upsampler.761 = type { void (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter.762 = type { void (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer.763 = type { void (%struct.jpeg_decompress_struct.764*, i32)*, void (%struct.jpeg_decompress_struct.764*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct.764*)*, void (%struct.jpeg_decompress_struct.764*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @jpeg_idct_2x2(%struct.jpeg_decompress_struct.764* %0, %struct.jpeg_component_info* %1, i16* %2, i8** %3, i32 %4) #0 {
  %6 = alloca %struct.jpeg_decompress_struct.764*, align 8
  %7 = alloca %struct.jpeg_component_info*, align 8
  %8 = alloca i16*, align 8
  %9 = alloca i8**, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i16*, align 8
  %15 = alloca i32*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i32, align 4
  %20 = alloca [16 x i32], align 16
  %21 = alloca i32, align 4
  %22 = alloca i8, align 1
  store %struct.jpeg_decompress_struct.764* %0, %struct.jpeg_decompress_struct.764** %6, align 8
  store %struct.jpeg_component_info* %1, %struct.jpeg_component_info** %7, align 8
  store i16* %2, i16** %8, align 8
  store i8** %3, i8*** %9, align 8
  store i32 %4, i32* %10, align 4
  %23 = load %struct.jpeg_decompress_struct.764*, %struct.jpeg_decompress_struct.764** %6, align 8
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct.764, %struct.jpeg_decompress_struct.764* %23, i32 0, i32 61
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 128
  store i8* %26, i8** %18, align 8
  %27 = load i16*, i16** %8, align 8
  store i16* %27, i16** %14, align 8
  %28 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %7, align 8
  %29 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %28, i32 0, i32 20
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast i8* %30 to i32*
  store i32* %31, i32** %15, align 8
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 0
  store i32* %32, i32** %16, align 8
  store i32 8, i32* %19, align 4
  br label %33

33:                                               ; preds = %161, %5
  %34 = load i32, i32* %19, align 4
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %170

36:                                               ; preds = %33
  %37 = load i32, i32* %19, align 4
  %38 = icmp eq i32 %37, 6
  br i1 %38, label %45, label %39

39:                                               ; preds = %36
  %40 = load i32, i32* %19, align 4
  %41 = icmp eq i32 %40, 4
  br i1 %41, label %45, label %42

42:                                               ; preds = %39
  %43 = load i32, i32* %19, align 4
  %44 = icmp eq i32 %43, 2
  br i1 %44, label %45, label %46

45:                                               ; preds = %42, %39, %36
  br label %161

46:                                               ; preds = %42
  %47 = load i16*, i16** %14, align 8
  %48 = getelementptr inbounds i16, i16* %47, i64 8
  %49 = load i16, i16* %48, align 2
  %50 = sext i16 %49 to i32
  %51 = load i16*, i16** %14, align 8
  %52 = getelementptr inbounds i16, i16* %51, i64 24
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = or i32 %50, %54
  %56 = load i16*, i16** %14, align 8
  %57 = getelementptr inbounds i16, i16* %56, i64 40
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = or i32 %55, %59
  %61 = load i16*, i16** %14, align 8
  %62 = getelementptr inbounds i16, i16* %61, i64 56
  %63 = load i16, i16* %62, align 2
  %64 = sext i16 %63 to i32
  %65 = or i32 %60, %64
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %83

67:                                               ; preds = %46
  %68 = load i16*, i16** %14, align 8
  %69 = getelementptr inbounds i16, i16* %68, i64 0
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = load i32*, i32** %15, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 0
  %74 = load i32, i32* %73, align 4
  %75 = mul nsw i32 %71, %74
  %76 = shl i32 %75, 2
  store i32 %76, i32* %21, align 4
  %77 = load i32, i32* %21, align 4
  %78 = load i32*, i32** %16, align 8
  %79 = getelementptr inbounds i32, i32* %78, i64 0
  store i32 %77, i32* %79, align 4
  %80 = load i32, i32* %21, align 4
  %81 = load i32*, i32** %16, align 8
  %82 = getelementptr inbounds i32, i32* %81, i64 8
  store i32 %80, i32* %82, align 4
  br label %161

83:                                               ; preds = %46
  %84 = load i16*, i16** %14, align 8
  %85 = getelementptr inbounds i16, i16* %84, i64 0
  %86 = load i16, i16* %85, align 2
  %87 = sext i16 %86 to i32
  %88 = load i32*, i32** %15, align 8
  %89 = getelementptr inbounds i32, i32* %88, i64 0
  %90 = load i32, i32* %89, align 4
  %91 = mul nsw i32 %87, %90
  %92 = sext i32 %91 to i64
  store i64 %92, i64* %13, align 8
  %93 = load i64, i64* %13, align 8
  %94 = shl i64 %93, 15
  store i64 %94, i64* %12, align 8
  %95 = load i16*, i16** %14, align 8
  %96 = getelementptr inbounds i16, i16* %95, i64 56
  %97 = load i16, i16* %96, align 2
  %98 = sext i16 %97 to i32
  %99 = load i32*, i32** %15, align 8
  %100 = getelementptr inbounds i32, i32* %99, i64 56
  %101 = load i32, i32* %100, align 4
  %102 = mul nsw i32 %98, %101
  %103 = sext i32 %102 to i64
  store i64 %103, i64* %13, align 8
  %104 = load i64, i64* %13, align 8
  %105 = mul nsw i64 %104, -5906
  store i64 %105, i64* %11, align 8
  %106 = load i16*, i16** %14, align 8
  %107 = getelementptr inbounds i16, i16* %106, i64 40
  %108 = load i16, i16* %107, align 2
  %109 = sext i16 %108 to i32
  %110 = load i32*, i32** %15, align 8
  %111 = getelementptr inbounds i32, i32* %110, i64 40
  %112 = load i32, i32* %111, align 4
  %113 = mul nsw i32 %109, %112
  %114 = sext i32 %113 to i64
  store i64 %114, i64* %13, align 8
  %115 = load i64, i64* %13, align 8
  %116 = mul nsw i64 %115, 6967
  %117 = load i64, i64* %11, align 8
  %118 = add nsw i64 %117, %116
  store i64 %118, i64* %11, align 8
  %119 = load i16*, i16** %14, align 8
  %120 = getelementptr inbounds i16, i16* %119, i64 24
  %121 = load i16, i16* %120, align 2
  %122 = sext i16 %121 to i32
  %123 = load i32*, i32** %15, align 8
  %124 = getelementptr inbounds i32, i32* %123, i64 24
  %125 = load i32, i32* %124, align 4
  %126 = mul nsw i32 %122, %125
  %127 = sext i32 %126 to i64
  store i64 %127, i64* %13, align 8
  %128 = load i64, i64* %13, align 8
  %129 = mul nsw i64 %128, -10426
  %130 = load i64, i64* %11, align 8
  %131 = add nsw i64 %130, %129
  store i64 %131, i64* %11, align 8
  %132 = load i16*, i16** %14, align 8
  %133 = getelementptr inbounds i16, i16* %132, i64 8
  %134 = load i16, i16* %133, align 2
  %135 = sext i16 %134 to i32
  %136 = load i32*, i32** %15, align 8
  %137 = getelementptr inbounds i32, i32* %136, i64 8
  %138 = load i32, i32* %137, align 4
  %139 = mul nsw i32 %135, %138
  %140 = sext i32 %139 to i64
  store i64 %140, i64* %13, align 8
  %141 = load i64, i64* %13, align 8
  %142 = mul nsw i64 %141, 29692
  %143 = load i64, i64* %11, align 8
  %144 = add nsw i64 %143, %142
  store i64 %144, i64* %11, align 8
  %145 = load i64, i64* %12, align 8
  %146 = load i64, i64* %11, align 8
  %147 = add nsw i64 %145, %146
  %148 = add nsw i64 %147, 4096
  %149 = ashr i64 %148, 13
  %150 = trunc i64 %149 to i32
  %151 = load i32*, i32** %16, align 8
  %152 = getelementptr inbounds i32, i32* %151, i64 0
  store i32 %150, i32* %152, align 4
  %153 = load i64, i64* %12, align 8
  %154 = load i64, i64* %11, align 8
  %155 = sub nsw i64 %153, %154
  %156 = add nsw i64 %155, 4096
  %157 = ashr i64 %156, 13
  %158 = trunc i64 %157 to i32
  %159 = load i32*, i32** %16, align 8
  %160 = getelementptr inbounds i32, i32* %159, i64 8
  store i32 %158, i32* %160, align 4
  br label %161

161:                                              ; preds = %83, %67, %45
  %162 = load i16*, i16** %14, align 8
  %163 = getelementptr inbounds i16, i16* %162, i32 1
  store i16* %163, i16** %14, align 8
  %164 = load i32*, i32** %15, align 8
  %165 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %165, i32** %15, align 8
  %166 = load i32*, i32** %16, align 8
  %167 = getelementptr inbounds i32, i32* %166, i32 1
  store i32* %167, i32** %16, align 8
  %168 = load i32, i32* %19, align 4
  %169 = add nsw i32 %168, -1
  store i32 %169, i32* %19, align 4
  br label %33, !llvm.loop !7

170:                                              ; preds = %33
  %171 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 0
  store i32* %171, i32** %16, align 8
  store i32 0, i32* %19, align 4
  br label %172

172:                                              ; preds = %278, %170
  %173 = load i32, i32* %19, align 4
  %174 = icmp slt i32 %173, 2
  br i1 %174, label %175, label %281

175:                                              ; preds = %172
  %176 = load i8**, i8*** %9, align 8
  %177 = load i32, i32* %19, align 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8*, i8** %176, i64 %178
  %180 = load i8*, i8** %179, align 8
  %181 = load i32, i32* %10, align 4
  %182 = zext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %180, i64 %182
  store i8* %183, i8** %17, align 8
  %184 = load i32*, i32** %16, align 8
  %185 = getelementptr inbounds i32, i32* %184, i64 1
  %186 = load i32, i32* %185, align 4
  %187 = load i32*, i32** %16, align 8
  %188 = getelementptr inbounds i32, i32* %187, i64 3
  %189 = load i32, i32* %188, align 4
  %190 = or i32 %186, %189
  %191 = load i32*, i32** %16, align 8
  %192 = getelementptr inbounds i32, i32* %191, i64 5
  %193 = load i32, i32* %192, align 4
  %194 = or i32 %190, %193
  %195 = load i32*, i32** %16, align 8
  %196 = getelementptr inbounds i32, i32* %195, i64 7
  %197 = load i32, i32* %196, align 4
  %198 = or i32 %194, %197
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %221

200:                                              ; preds = %175
  %201 = load i8*, i8** %18, align 8
  %202 = load i32*, i32** %16, align 8
  %203 = getelementptr inbounds i32, i32* %202, i64 0
  %204 = load i32, i32* %203, align 4
  %205 = sext i32 %204 to i64
  %206 = add nsw i64 %205, 16
  %207 = ashr i64 %206, 5
  %208 = trunc i64 %207 to i32
  %209 = and i32 %208, 1023
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %201, i64 %210
  %212 = load i8, i8* %211, align 1
  store i8 %212, i8* %22, align 1
  %213 = load i8, i8* %22, align 1
  %214 = load i8*, i8** %17, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 0
  store i8 %213, i8* %215, align 1
  %216 = load i8, i8* %22, align 1
  %217 = load i8*, i8** %17, align 8
  %218 = getelementptr inbounds i8, i8* %217, i64 1
  store i8 %216, i8* %218, align 1
  %219 = load i32*, i32** %16, align 8
  %220 = getelementptr inbounds i32, i32* %219, i64 8
  store i32* %220, i32** %16, align 8
  br label %278

221:                                              ; preds = %175
  %222 = load i32*, i32** %16, align 8
  %223 = getelementptr inbounds i32, i32* %222, i64 0
  %224 = load i32, i32* %223, align 4
  %225 = sext i32 %224 to i64
  %226 = shl i64 %225, 15
  store i64 %226, i64* %12, align 8
  %227 = load i32*, i32** %16, align 8
  %228 = getelementptr inbounds i32, i32* %227, i64 7
  %229 = load i32, i32* %228, align 4
  %230 = sext i32 %229 to i64
  %231 = mul nsw i64 %230, -5906
  %232 = load i32*, i32** %16, align 8
  %233 = getelementptr inbounds i32, i32* %232, i64 5
  %234 = load i32, i32* %233, align 4
  %235 = sext i32 %234 to i64
  %236 = mul nsw i64 %235, 6967
  %237 = add nsw i64 %231, %236
  %238 = load i32*, i32** %16, align 8
  %239 = getelementptr inbounds i32, i32* %238, i64 3
  %240 = load i32, i32* %239, align 4
  %241 = sext i32 %240 to i64
  %242 = mul nsw i64 %241, -10426
  %243 = add nsw i64 %237, %242
  %244 = load i32*, i32** %16, align 8
  %245 = getelementptr inbounds i32, i32* %244, i64 1
  %246 = load i32, i32* %245, align 4
  %247 = sext i32 %246 to i64
  %248 = mul nsw i64 %247, 29692
  %249 = add nsw i64 %243, %248
  store i64 %249, i64* %11, align 8
  %250 = load i8*, i8** %18, align 8
  %251 = load i64, i64* %12, align 8
  %252 = load i64, i64* %11, align 8
  %253 = add nsw i64 %251, %252
  %254 = add nsw i64 %253, 524288
  %255 = ashr i64 %254, 20
  %256 = trunc i64 %255 to i32
  %257 = and i32 %256, 1023
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8, i8* %250, i64 %258
  %260 = load i8, i8* %259, align 1
  %261 = load i8*, i8** %17, align 8
  %262 = getelementptr inbounds i8, i8* %261, i64 0
  store i8 %260, i8* %262, align 1
  %263 = load i8*, i8** %18, align 8
  %264 = load i64, i64* %12, align 8
  %265 = load i64, i64* %11, align 8
  %266 = sub nsw i64 %264, %265
  %267 = add nsw i64 %266, 524288
  %268 = ashr i64 %267, 20
  %269 = trunc i64 %268 to i32
  %270 = and i32 %269, 1023
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds i8, i8* %263, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = load i8*, i8** %17, align 8
  %275 = getelementptr inbounds i8, i8* %274, i64 1
  store i8 %273, i8* %275, align 1
  %276 = load i32*, i32** %16, align 8
  %277 = getelementptr inbounds i32, i32* %276, i64 8
  store i32* %277, i32** %16, align 8
  br label %278

278:                                              ; preds = %221, %200
  %279 = load i32, i32* %19, align 4
  %280 = add nsw i32 %279, 1
  store i32 %280, i32* %19, align 4
  br label %172, !llvm.loop !9

281:                                              ; preds = %172
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @jpeg_idct_4x4(%struct.jpeg_decompress_struct.764* %0, %struct.jpeg_component_info* %1, i16* %2, i8** %3, i32 %4) #0 {
  %6 = alloca %struct.jpeg_decompress_struct.764*, align 8
  %7 = alloca %struct.jpeg_component_info*, align 8
  %8 = alloca i16*, align 8
  %9 = alloca i8**, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i16*, align 8
  %20 = alloca i32*, align 8
  %21 = alloca i32*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i32, align 4
  %25 = alloca [32 x i32], align 16
  %26 = alloca i32, align 4
  %27 = alloca i8, align 1
  store %struct.jpeg_decompress_struct.764* %0, %struct.jpeg_decompress_struct.764** %6, align 8
  store %struct.jpeg_component_info* %1, %struct.jpeg_component_info** %7, align 8
  store i16* %2, i16** %8, align 8
  store i8** %3, i8*** %9, align 8
  store i32 %4, i32* %10, align 4
  %28 = load %struct.jpeg_decompress_struct.764*, %struct.jpeg_decompress_struct.764** %6, align 8
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct.764, %struct.jpeg_decompress_struct.764* %28, i32 0, i32 61
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 128
  store i8* %31, i8** %23, align 8
  %32 = load i16*, i16** %8, align 8
  store i16* %32, i16** %19, align 8
  %33 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %7, align 8
  %34 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i32 0, i32 20
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to i32*
  store i32* %36, i32** %20, align 8
  %37 = getelementptr inbounds [32 x i32], [32 x i32]* %25, i64 0, i64 0
  store i32* %37, i32** %21, align 8
  store i32 8, i32* %24, align 4
  br label %38

38:                                               ; preds = %229, %5
  %39 = load i32, i32* %24, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %238

41:                                               ; preds = %38
  %42 = load i32, i32* %24, align 4
  %43 = icmp eq i32 %42, 4
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  br label %229

45:                                               ; preds = %41
  %46 = load i16*, i16** %19, align 8
  %47 = getelementptr inbounds i16, i16* %46, i64 8
  %48 = load i16, i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = load i16*, i16** %19, align 8
  %51 = getelementptr inbounds i16, i16* %50, i64 16
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = or i32 %49, %53
  %55 = load i16*, i16** %19, align 8
  %56 = getelementptr inbounds i16, i16* %55, i64 24
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = or i32 %54, %58
  %60 = load i16*, i16** %19, align 8
  %61 = getelementptr inbounds i16, i16* %60, i64 40
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = or i32 %59, %63
  %65 = load i16*, i16** %19, align 8
  %66 = getelementptr inbounds i16, i16* %65, i64 48
  %67 = load i16, i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = or i32 %64, %68
  %70 = load i16*, i16** %19, align 8
  %71 = getelementptr inbounds i16, i16* %70, i64 56
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = or i32 %69, %73
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %98

76:                                               ; preds = %45
  %77 = load i16*, i16** %19, align 8
  %78 = getelementptr inbounds i16, i16* %77, i64 0
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = load i32*, i32** %20, align 8
  %82 = getelementptr inbounds i32, i32* %81, i64 0
  %83 = load i32, i32* %82, align 4
  %84 = mul nsw i32 %80, %83
  %85 = shl i32 %84, 2
  store i32 %85, i32* %26, align 4
  %86 = load i32, i32* %26, align 4
  %87 = load i32*, i32** %21, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 0
  store i32 %86, i32* %88, align 4
  %89 = load i32, i32* %26, align 4
  %90 = load i32*, i32** %21, align 8
  %91 = getelementptr inbounds i32, i32* %90, i64 8
  store i32 %89, i32* %91, align 4
  %92 = load i32, i32* %26, align 4
  %93 = load i32*, i32** %21, align 8
  %94 = getelementptr inbounds i32, i32* %93, i64 16
  store i32 %92, i32* %94, align 4
  %95 = load i32, i32* %26, align 4
  %96 = load i32*, i32** %21, align 8
  %97 = getelementptr inbounds i32, i32* %96, i64 24
  store i32 %95, i32* %97, align 4
  br label %229

98:                                               ; preds = %45
  %99 = load i16*, i16** %19, align 8
  %100 = getelementptr inbounds i16, i16* %99, i64 0
  %101 = load i16, i16* %100, align 2
  %102 = sext i16 %101 to i32
  %103 = load i32*, i32** %20, align 8
  %104 = getelementptr inbounds i32, i32* %103, i64 0
  %105 = load i32, i32* %104, align 4
  %106 = mul nsw i32 %102, %105
  %107 = sext i32 %106 to i64
  store i64 %107, i64* %11, align 8
  %108 = load i64, i64* %11, align 8
  %109 = shl i64 %108, 14
  store i64 %109, i64* %11, align 8
  %110 = load i16*, i16** %19, align 8
  %111 = getelementptr inbounds i16, i16* %110, i64 16
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i32
  %114 = load i32*, i32** %20, align 8
  %115 = getelementptr inbounds i32, i32* %114, i64 16
  %116 = load i32, i32* %115, align 4
  %117 = mul nsw i32 %113, %116
  %118 = sext i32 %117 to i64
  store i64 %118, i64* %16, align 8
  %119 = load i16*, i16** %19, align 8
  %120 = getelementptr inbounds i16, i16* %119, i64 48
  %121 = load i16, i16* %120, align 2
  %122 = sext i16 %121 to i32
  %123 = load i32*, i32** %20, align 8
  %124 = getelementptr inbounds i32, i32* %123, i64 48
  %125 = load i32, i32* %124, align 4
  %126 = mul nsw i32 %122, %125
  %127 = sext i32 %126 to i64
  store i64 %127, i64* %17, align 8
  %128 = load i64, i64* %16, align 8
  %129 = mul nsw i64 %128, 15137
  %130 = load i64, i64* %17, align 8
  %131 = mul nsw i64 %130, -6270
  %132 = add nsw i64 %129, %131
  store i64 %132, i64* %12, align 8
  %133 = load i64, i64* %11, align 8
  %134 = load i64, i64* %12, align 8
  %135 = add nsw i64 %133, %134
  store i64 %135, i64* %13, align 8
  %136 = load i64, i64* %11, align 8
  %137 = load i64, i64* %12, align 8
  %138 = sub nsw i64 %136, %137
  store i64 %138, i64* %14, align 8
  %139 = load i16*, i16** %19, align 8
  %140 = getelementptr inbounds i16, i16* %139, i64 56
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i32
  %143 = load i32*, i32** %20, align 8
  %144 = getelementptr inbounds i32, i32* %143, i64 56
  %145 = load i32, i32* %144, align 4
  %146 = mul nsw i32 %142, %145
  %147 = sext i32 %146 to i64
  store i64 %147, i64* %15, align 8
  %148 = load i16*, i16** %19, align 8
  %149 = getelementptr inbounds i16, i16* %148, i64 40
  %150 = load i16, i16* %149, align 2
  %151 = sext i16 %150 to i32
  %152 = load i32*, i32** %20, align 8
  %153 = getelementptr inbounds i32, i32* %152, i64 40
  %154 = load i32, i32* %153, align 4
  %155 = mul nsw i32 %151, %154
  %156 = sext i32 %155 to i64
  store i64 %156, i64* %16, align 8
  %157 = load i16*, i16** %19, align 8
  %158 = getelementptr inbounds i16, i16* %157, i64 24
  %159 = load i16, i16* %158, align 2
  %160 = sext i16 %159 to i32
  %161 = load i32*, i32** %20, align 8
  %162 = getelementptr inbounds i32, i32* %161, i64 24
  %163 = load i32, i32* %162, align 4
  %164 = mul nsw i32 %160, %163
  %165 = sext i32 %164 to i64
  store i64 %165, i64* %17, align 8
  %166 = load i16*, i16** %19, align 8
  %167 = getelementptr inbounds i16, i16* %166, i64 8
  %168 = load i16, i16* %167, align 2
  %169 = sext i16 %168 to i32
  %170 = load i32*, i32** %20, align 8
  %171 = getelementptr inbounds i32, i32* %170, i64 8
  %172 = load i32, i32* %171, align 4
  %173 = mul nsw i32 %169, %172
  %174 = sext i32 %173 to i64
  store i64 %174, i64* %18, align 8
  %175 = load i64, i64* %15, align 8
  %176 = mul nsw i64 %175, -1730
  %177 = load i64, i64* %16, align 8
  %178 = mul nsw i64 %177, 11893
  %179 = add nsw i64 %176, %178
  %180 = load i64, i64* %17, align 8
  %181 = mul nsw i64 %180, -17799
  %182 = add nsw i64 %179, %181
  %183 = load i64, i64* %18, align 8
  %184 = mul nsw i64 %183, 8697
  %185 = add nsw i64 %182, %184
  store i64 %185, i64* %11, align 8
  %186 = load i64, i64* %15, align 8
  %187 = mul nsw i64 %186, -4176
  %188 = load i64, i64* %16, align 8
  %189 = mul nsw i64 %188, -4926
  %190 = add nsw i64 %187, %189
  %191 = load i64, i64* %17, align 8
  %192 = mul nsw i64 %191, 7373
  %193 = add nsw i64 %190, %192
  %194 = load i64, i64* %18, align 8
  %195 = mul nsw i64 %194, 20995
  %196 = add nsw i64 %193, %195
  store i64 %196, i64* %12, align 8
  %197 = load i64, i64* %13, align 8
  %198 = load i64, i64* %12, align 8
  %199 = add nsw i64 %197, %198
  %200 = add nsw i64 %199, 2048
  %201 = ashr i64 %200, 12
  %202 = trunc i64 %201 to i32
  %203 = load i32*, i32** %21, align 8
  %204 = getelementptr inbounds i32, i32* %203, i64 0
  store i32 %202, i32* %204, align 4
  %205 = load i64, i64* %13, align 8
  %206 = load i64, i64* %12, align 8
  %207 = sub nsw i64 %205, %206
  %208 = add nsw i64 %207, 2048
  %209 = ashr i64 %208, 12
  %210 = trunc i64 %209 to i32
  %211 = load i32*, i32** %21, align 8
  %212 = getelementptr inbounds i32, i32* %211, i64 24
  store i32 %210, i32* %212, align 4
  %213 = load i64, i64* %14, align 8
  %214 = load i64, i64* %11, align 8
  %215 = add nsw i64 %213, %214
  %216 = add nsw i64 %215, 2048
  %217 = ashr i64 %216, 12
  %218 = trunc i64 %217 to i32
  %219 = load i32*, i32** %21, align 8
  %220 = getelementptr inbounds i32, i32* %219, i64 8
  store i32 %218, i32* %220, align 4
  %221 = load i64, i64* %14, align 8
  %222 = load i64, i64* %11, align 8
  %223 = sub nsw i64 %221, %222
  %224 = add nsw i64 %223, 2048
  %225 = ashr i64 %224, 12
  %226 = trunc i64 %225 to i32
  %227 = load i32*, i32** %21, align 8
  %228 = getelementptr inbounds i32, i32* %227, i64 16
  store i32 %226, i32* %228, align 4
  br label %229

229:                                              ; preds = %98, %76, %44
  %230 = load i16*, i16** %19, align 8
  %231 = getelementptr inbounds i16, i16* %230, i32 1
  store i16* %231, i16** %19, align 8
  %232 = load i32*, i32** %20, align 8
  %233 = getelementptr inbounds i32, i32* %232, i32 1
  store i32* %233, i32** %20, align 8
  %234 = load i32*, i32** %21, align 8
  %235 = getelementptr inbounds i32, i32* %234, i32 1
  store i32* %235, i32** %21, align 8
  %236 = load i32, i32* %24, align 4
  %237 = add nsw i32 %236, -1
  store i32 %237, i32* %24, align 4
  br label %38, !llvm.loop !10

238:                                              ; preds = %38
  %239 = getelementptr inbounds [32 x i32], [32 x i32]* %25, i64 0, i64 0
  store i32* %239, i32** %21, align 8
  store i32 0, i32* %24, align 4
  br label %240

240:                                              ; preds = %418, %238
  %241 = load i32, i32* %24, align 4
  %242 = icmp slt i32 %241, 4
  br i1 %242, label %243, label %421

243:                                              ; preds = %240
  %244 = load i8**, i8*** %9, align 8
  %245 = load i32, i32* %24, align 4
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i8*, i8** %244, i64 %246
  %248 = load i8*, i8** %247, align 8
  %249 = load i32, i32* %10, align 4
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds i8, i8* %248, i64 %250
  store i8* %251, i8** %22, align 8
  %252 = load i32*, i32** %21, align 8
  %253 = getelementptr inbounds i32, i32* %252, i64 1
  %254 = load i32, i32* %253, align 4
  %255 = load i32*, i32** %21, align 8
  %256 = getelementptr inbounds i32, i32* %255, i64 2
  %257 = load i32, i32* %256, align 4
  %258 = or i32 %254, %257
  %259 = load i32*, i32** %21, align 8
  %260 = getelementptr inbounds i32, i32* %259, i64 3
  %261 = load i32, i32* %260, align 4
  %262 = or i32 %258, %261
  %263 = load i32*, i32** %21, align 8
  %264 = getelementptr inbounds i32, i32* %263, i64 5
  %265 = load i32, i32* %264, align 4
  %266 = or i32 %262, %265
  %267 = load i32*, i32** %21, align 8
  %268 = getelementptr inbounds i32, i32* %267, i64 6
  %269 = load i32, i32* %268, align 4
  %270 = or i32 %266, %269
  %271 = load i32*, i32** %21, align 8
  %272 = getelementptr inbounds i32, i32* %271, i64 7
  %273 = load i32, i32* %272, align 4
  %274 = or i32 %270, %273
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %303

276:                                              ; preds = %243
  %277 = load i8*, i8** %23, align 8
  %278 = load i32*, i32** %21, align 8
  %279 = getelementptr inbounds i32, i32* %278, i64 0
  %280 = load i32, i32* %279, align 4
  %281 = sext i32 %280 to i64
  %282 = add nsw i64 %281, 16
  %283 = ashr i64 %282, 5
  %284 = trunc i64 %283 to i32
  %285 = and i32 %284, 1023
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds i8, i8* %277, i64 %286
  %288 = load i8, i8* %287, align 1
  store i8 %288, i8* %27, align 1
  %289 = load i8, i8* %27, align 1
  %290 = load i8*, i8** %22, align 8
  %291 = getelementptr inbounds i8, i8* %290, i64 0
  store i8 %289, i8* %291, align 1
  %292 = load i8, i8* %27, align 1
  %293 = load i8*, i8** %22, align 8
  %294 = getelementptr inbounds i8, i8* %293, i64 1
  store i8 %292, i8* %294, align 1
  %295 = load i8, i8* %27, align 1
  %296 = load i8*, i8** %22, align 8
  %297 = getelementptr inbounds i8, i8* %296, i64 2
  store i8 %295, i8* %297, align 1
  %298 = load i8, i8* %27, align 1
  %299 = load i8*, i8** %22, align 8
  %300 = getelementptr inbounds i8, i8* %299, i64 3
  store i8 %298, i8* %300, align 1
  %301 = load i32*, i32** %21, align 8
  %302 = getelementptr inbounds i32, i32* %301, i64 8
  store i32* %302, i32** %21, align 8
  br label %418

303:                                              ; preds = %243
  %304 = load i32*, i32** %21, align 8
  %305 = getelementptr inbounds i32, i32* %304, i64 0
  %306 = load i32, i32* %305, align 4
  %307 = sext i32 %306 to i64
  %308 = shl i64 %307, 14
  store i64 %308, i64* %11, align 8
  %309 = load i32*, i32** %21, align 8
  %310 = getelementptr inbounds i32, i32* %309, i64 2
  %311 = load i32, i32* %310, align 4
  %312 = sext i32 %311 to i64
  %313 = mul nsw i64 %312, 15137
  %314 = load i32*, i32** %21, align 8
  %315 = getelementptr inbounds i32, i32* %314, i64 6
  %316 = load i32, i32* %315, align 4
  %317 = sext i32 %316 to i64
  %318 = mul nsw i64 %317, -6270
  %319 = add nsw i64 %313, %318
  store i64 %319, i64* %12, align 8
  %320 = load i64, i64* %11, align 8
  %321 = load i64, i64* %12, align 8
  %322 = add nsw i64 %320, %321
  store i64 %322, i64* %13, align 8
  %323 = load i64, i64* %11, align 8
  %324 = load i64, i64* %12, align 8
  %325 = sub nsw i64 %323, %324
  store i64 %325, i64* %14, align 8
  %326 = load i32*, i32** %21, align 8
  %327 = getelementptr inbounds i32, i32* %326, i64 7
  %328 = load i32, i32* %327, align 4
  %329 = sext i32 %328 to i64
  store i64 %329, i64* %15, align 8
  %330 = load i32*, i32** %21, align 8
  %331 = getelementptr inbounds i32, i32* %330, i64 5
  %332 = load i32, i32* %331, align 4
  %333 = sext i32 %332 to i64
  store i64 %333, i64* %16, align 8
  %334 = load i32*, i32** %21, align 8
  %335 = getelementptr inbounds i32, i32* %334, i64 3
  %336 = load i32, i32* %335, align 4
  %337 = sext i32 %336 to i64
  store i64 %337, i64* %17, align 8
  %338 = load i32*, i32** %21, align 8
  %339 = getelementptr inbounds i32, i32* %338, i64 1
  %340 = load i32, i32* %339, align 4
  %341 = sext i32 %340 to i64
  store i64 %341, i64* %18, align 8
  %342 = load i64, i64* %15, align 8
  %343 = mul nsw i64 %342, -1730
  %344 = load i64, i64* %16, align 8
  %345 = mul nsw i64 %344, 11893
  %346 = add nsw i64 %343, %345
  %347 = load i64, i64* %17, align 8
  %348 = mul nsw i64 %347, -17799
  %349 = add nsw i64 %346, %348
  %350 = load i64, i64* %18, align 8
  %351 = mul nsw i64 %350, 8697
  %352 = add nsw i64 %349, %351
  store i64 %352, i64* %11, align 8
  %353 = load i64, i64* %15, align 8
  %354 = mul nsw i64 %353, -4176
  %355 = load i64, i64* %16, align 8
  %356 = mul nsw i64 %355, -4926
  %357 = add nsw i64 %354, %356
  %358 = load i64, i64* %17, align 8
  %359 = mul nsw i64 %358, 7373
  %360 = add nsw i64 %357, %359
  %361 = load i64, i64* %18, align 8
  %362 = mul nsw i64 %361, 20995
  %363 = add nsw i64 %360, %362
  store i64 %363, i64* %12, align 8
  %364 = load i8*, i8** %23, align 8
  %365 = load i64, i64* %13, align 8
  %366 = load i64, i64* %12, align 8
  %367 = add nsw i64 %365, %366
  %368 = add nsw i64 %367, 262144
  %369 = ashr i64 %368, 19
  %370 = trunc i64 %369 to i32
  %371 = and i32 %370, 1023
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds i8, i8* %364, i64 %372
  %374 = load i8, i8* %373, align 1
  %375 = load i8*, i8** %22, align 8
  %376 = getelementptr inbounds i8, i8* %375, i64 0
  store i8 %374, i8* %376, align 1
  %377 = load i8*, i8** %23, align 8
  %378 = load i64, i64* %13, align 8
  %379 = load i64, i64* %12, align 8
  %380 = sub nsw i64 %378, %379
  %381 = add nsw i64 %380, 262144
  %382 = ashr i64 %381, 19
  %383 = trunc i64 %382 to i32
  %384 = and i32 %383, 1023
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i8, i8* %377, i64 %385
  %387 = load i8, i8* %386, align 1
  %388 = load i8*, i8** %22, align 8
  %389 = getelementptr inbounds i8, i8* %388, i64 3
  store i8 %387, i8* %389, align 1
  %390 = load i8*, i8** %23, align 8
  %391 = load i64, i64* %14, align 8
  %392 = load i64, i64* %11, align 8
  %393 = add nsw i64 %391, %392
  %394 = add nsw i64 %393, 262144
  %395 = ashr i64 %394, 19
  %396 = trunc i64 %395 to i32
  %397 = and i32 %396, 1023
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds i8, i8* %390, i64 %398
  %400 = load i8, i8* %399, align 1
  %401 = load i8*, i8** %22, align 8
  %402 = getelementptr inbounds i8, i8* %401, i64 1
  store i8 %400, i8* %402, align 1
  %403 = load i8*, i8** %23, align 8
  %404 = load i64, i64* %14, align 8
  %405 = load i64, i64* %11, align 8
  %406 = sub nsw i64 %404, %405
  %407 = add nsw i64 %406, 262144
  %408 = ashr i64 %407, 19
  %409 = trunc i64 %408 to i32
  %410 = and i32 %409, 1023
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i8, i8* %403, i64 %411
  %413 = load i8, i8* %412, align 1
  %414 = load i8*, i8** %22, align 8
  %415 = getelementptr inbounds i8, i8* %414, i64 2
  store i8 %413, i8* %415, align 1
  %416 = load i32*, i32** %21, align 8
  %417 = getelementptr inbounds i32, i32* %416, i64 8
  store i32* %417, i32** %21, align 8
  br label %418

418:                                              ; preds = %303, %276
  %419 = load i32, i32* %24, align 4
  %420 = add nsw i32 %419, 1
  store i32 %420, i32* %24, align 4
  br label %240, !llvm.loop !11

421:                                              ; preds = %240
  ret void
}

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project/ 24c8eaec9467b2aaf70b0db33a4e4dd415139a50)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
