; AUTOMATICALLY GENERATED BY tools/llvm-nextfm-remark/compare-mergesize.rb
;
; RUN: %opt -S --passes="multiple-func-merging" --multiple-func-merging-only=post_process_2pass --multiple-func-merging-only=post_process_prepass -o %t.mfm.ll %s
; RUN: %opt -S --passes="func-merging" --func-merging-only=post_process_2pass --func-merging-only=post_process_prepass -o %t.fm.ll %s
; RUN: %llc --filetype=obj %t.mfm.ll -o %t.mfm.o
; RUN: %llc --filetype=obj %t.fm.ll -o %t.fm.o
; RUN: %strip %t.mfm.o
; RUN: %strip %t.fm.o
; RUN: [[ $(stat -c%%s %t.mfm.o) -le $(stat -c%%s %t.fm.o) ]]

; ModuleID = '../benchmarks/mibench/consumer/jpeg/cjpeg.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct.637 = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr.622*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master.626*, %struct.jpeg_d_main_controller.627*, %struct.jpeg_d_coef_controller.628*, %struct.jpeg_d_post_controller.629*, %struct.jpeg_input_controller.630*, %struct.jpeg_marker_reader.631*, %struct.jpeg_entropy_decoder.632*, %struct.jpeg_inverse_dct.633*, %struct.jpeg_upsampler.634*, %struct.jpeg_color_deconverter.635*, %struct.jpeg_color_quantizer.636* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type { i8**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_sarray_control*, %struct.backing_store_struct }
%struct.backing_store_struct = type { void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct.775*, %struct.backing_store_struct*)*, %struct._IO_FILE*, [64 x i8] }
%struct.jpeg_common_struct.775 = type { %struct.jpeg_error_mgr.766*, %struct.jpeg_memory_mgr.773*, %struct.jpeg_progress_mgr*, i32, i32 }
%struct.jpeg_error_mgr.766 = type { {}*, void (%struct.jpeg_common_struct.775*, i32)*, {}*, void (%struct.jpeg_common_struct.775*, i8*)*, {}*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_memory_mgr.773 = type { i8* (%struct.jpeg_common_struct.775*, i32, i64)*, i8* (%struct.jpeg_common_struct.775*, i32, i64)*, i8** (%struct.jpeg_common_struct.775*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct.775*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct.775*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct.775*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct.775*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct.775*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct.775*, i32)*, {}*, i64 }
%struct.jvirt_barray_control = type { [64 x i16]**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_barray_control*, %struct.backing_store_struct }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr.622 = type { i8*, i64, void (%struct.jpeg_decompress_struct.637*)*, i32 (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*, i64)*, i32 (%struct.jpeg_decompress_struct.637*, i32)*, void (%struct.jpeg_decompress_struct.637*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master.626 = type { void (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*)*, i32 }
%struct.jpeg_d_main_controller.627 = type { void (%struct.jpeg_decompress_struct.637*, i32)*, void (%struct.jpeg_decompress_struct.637*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller.628 = type { void (%struct.jpeg_decompress_struct.637*)*, i32 (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*)*, i32 (%struct.jpeg_decompress_struct.637*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller.629 = type { void (%struct.jpeg_decompress_struct.637*, i32)*, void (%struct.jpeg_decompress_struct.637*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller.630 = type { i32 (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*)*, i32, i32 }
%struct.jpeg_marker_reader.631 = type { void (%struct.jpeg_decompress_struct.637*)*, i32 (%struct.jpeg_decompress_struct.637*)*, i32 (%struct.jpeg_decompress_struct.637*)*, i32 (%struct.jpeg_decompress_struct.637*)*, [16 x i32 (%struct.jpeg_decompress_struct.637*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder.632 = type { void (%struct.jpeg_decompress_struct.637*)*, i32 (%struct.jpeg_decompress_struct.637*, [64 x i16]**)* }
%struct.jpeg_inverse_dct.633 = type { void (%struct.jpeg_decompress_struct.637*)*, [10 x void (%struct.jpeg_decompress_struct.637*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler.634 = type { void (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter.635 = type { void (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer.636 = type { {}*, void (%struct.jpeg_decompress_struct.637*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct.637*)*, void (%struct.jpeg_decompress_struct.637*)* }
%struct.my_post_controller = type { %struct.jpeg_d_post_controller.629, %struct.jvirt_sarray_control*, i8**, i32, i32, i32 }

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden void @post_process_prepass(%struct.jpeg_decompress_struct.637* %0, i8*** %1, i32* %2, i32 %3, i8** %4, i32* %5, i32 %6) #0 {
  %8 = alloca %struct.jpeg_decompress_struct.637*, align 8
  %9 = alloca i8***, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8**, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.my_post_controller*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store %struct.jpeg_decompress_struct.637* %0, %struct.jpeg_decompress_struct.637** %8, align 8
  store i8*** %1, i8**** %9, align 8
  store i32* %2, i32** %10, align 8
  store i32 %3, i32* %11, align 4
  store i8** %4, i8*** %12, align 8
  store i32* %5, i32** %13, align 8
  store i32 %6, i32* %14, align 4
  %18 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct.637, %struct.jpeg_decompress_struct.637* %18, i32 0, i32 76
  %20 = load %struct.jpeg_d_post_controller.629*, %struct.jpeg_d_post_controller.629** %19, align 8
  %21 = bitcast %struct.jpeg_d_post_controller.629* %20 to %struct.my_post_controller*
  store %struct.my_post_controller* %21, %struct.my_post_controller** %15, align 8
  %22 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %23 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %22, i32 0, i32 5
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %46

26:                                               ; preds = %7
  %27 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct.637, %struct.jpeg_decompress_struct.637* %27, i32 0, i32 1
  %29 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %28, align 8
  %30 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %29, i32 0, i32 7
  %31 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %30, align 8
  %32 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %33 = bitcast %struct.jpeg_decompress_struct.637* %32 to %struct.jpeg_common_struct*
  %34 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %35 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %34, i32 0, i32 1
  %36 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %35, align 8
  %37 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %38 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %37, i32 0, i32 4
  %39 = load i32, i32* %38, align 4
  %40 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %41 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %40, i32 0, i32 3
  %42 = load i32, i32* %41, align 8
  %43 = call i8** %31(%struct.jpeg_common_struct* %33, %struct.jvirt_sarray_control* %36, i32 %39, i32 %42, i32 1)
  %44 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %45 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %44, i32 0, i32 2
  store i8** %43, i8*** %45, align 8
  br label %46

46:                                               ; preds = %26, %7
  %47 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %48 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %47, i32 0, i32 5
  %49 = load i32, i32* %48, align 8
  store i32 %49, i32* %16, align 4
  %50 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct.637, %struct.jpeg_decompress_struct.637* %50, i32 0, i32 81
  %52 = load %struct.jpeg_upsampler.634*, %struct.jpeg_upsampler.634** %51, align 8
  %53 = getelementptr inbounds %struct.jpeg_upsampler.634, %struct.jpeg_upsampler.634* %52, i32 0, i32 1
  %54 = load void (%struct.jpeg_decompress_struct.637*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct.637*, i8***, i32*, i32, i8**, i32*, i32)** %53, align 8
  %55 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %56 = load i8***, i8**** %9, align 8
  %57 = load i32*, i32** %10, align 8
  %58 = load i32, i32* %11, align 4
  %59 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %60 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %59, i32 0, i32 2
  %61 = load i8**, i8*** %60, align 8
  %62 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %63 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %62, i32 0, i32 5
  %64 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %65 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %64, i32 0, i32 3
  %66 = load i32, i32* %65, align 8
  call void %54(%struct.jpeg_decompress_struct.637* %55, i8*** %56, i32* %57, i32 %58, i8** %61, i32* %63, i32 %66)
  %67 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %68 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %67, i32 0, i32 5
  %69 = load i32, i32* %68, align 8
  %70 = load i32, i32* %16, align 4
  %71 = icmp ugt i32 %69, %70
  br i1 %71, label %72, label %95

72:                                               ; preds = %46
  %73 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %74 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %73, i32 0, i32 5
  %75 = load i32, i32* %74, align 8
  %76 = load i32, i32* %16, align 4
  %77 = sub i32 %75, %76
  store i32 %77, i32* %17, align 4
  %78 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct.637, %struct.jpeg_decompress_struct.637* %78, i32 0, i32 83
  %80 = load %struct.jpeg_color_quantizer.636*, %struct.jpeg_color_quantizer.636** %79, align 8
  %81 = getelementptr inbounds %struct.jpeg_color_quantizer.636, %struct.jpeg_color_quantizer.636* %80, i32 0, i32 1
  %82 = load void (%struct.jpeg_decompress_struct.637*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct.637*, i8**, i8**, i32)** %81, align 8
  %83 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %84 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %85 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %84, i32 0, i32 2
  %86 = load i8**, i8*** %85, align 8
  %87 = load i32, i32* %16, align 4
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i8*, i8** %86, i64 %88
  %90 = load i32, i32* %17, align 4
  call void %82(%struct.jpeg_decompress_struct.637* %83, i8** %89, i8** null, i32 %90)
  %91 = load i32, i32* %17, align 4
  %92 = load i32*, i32** %13, align 8
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, %91
  store i32 %94, i32* %92, align 4
  br label %95

95:                                               ; preds = %72, %46
  %96 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %97 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %96, i32 0, i32 5
  %98 = load i32, i32* %97, align 8
  %99 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %100 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %99, i32 0, i32 3
  %101 = load i32, i32* %100, align 8
  %102 = icmp uge i32 %98, %101
  br i1 %102, label %103, label %113

103:                                              ; preds = %95
  %104 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %105 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %104, i32 0, i32 3
  %106 = load i32, i32* %105, align 8
  %107 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %108 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %107, i32 0, i32 4
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, %106
  store i32 %110, i32* %108, align 4
  %111 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %112 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %111, i32 0, i32 5
  store i32 0, i32* %112, align 8
  br label %113

113:                                              ; preds = %103, %95
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden void @post_process_2pass(%struct.jpeg_decompress_struct.637* %0, i8*** %1, i32* %2, i32 %3, i8** %4, i32* %5, i32 %6) #0 {
  %8 = alloca %struct.jpeg_decompress_struct.637*, align 8
  %9 = alloca i8***, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8**, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.my_post_controller*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store %struct.jpeg_decompress_struct.637* %0, %struct.jpeg_decompress_struct.637** %8, align 8
  store i8*** %1, i8**** %9, align 8
  store i32* %2, i32** %10, align 8
  store i32 %3, i32* %11, align 4
  store i8** %4, i8*** %12, align 8
  store i32* %5, i32** %13, align 8
  store i32 %6, i32* %14, align 4
  %18 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct.637, %struct.jpeg_decompress_struct.637* %18, i32 0, i32 76
  %20 = load %struct.jpeg_d_post_controller.629*, %struct.jpeg_d_post_controller.629** %19, align 8
  %21 = bitcast %struct.jpeg_d_post_controller.629* %20 to %struct.my_post_controller*
  store %struct.my_post_controller* %21, %struct.my_post_controller** %15, align 8
  %22 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %23 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %22, i32 0, i32 5
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %46

26:                                               ; preds = %7
  %27 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct.637, %struct.jpeg_decompress_struct.637* %27, i32 0, i32 1
  %29 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %28, align 8
  %30 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %29, i32 0, i32 7
  %31 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %30, align 8
  %32 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %33 = bitcast %struct.jpeg_decompress_struct.637* %32 to %struct.jpeg_common_struct*
  %34 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %35 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %34, i32 0, i32 1
  %36 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %35, align 8
  %37 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %38 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %37, i32 0, i32 4
  %39 = load i32, i32* %38, align 4
  %40 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %41 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %40, i32 0, i32 3
  %42 = load i32, i32* %41, align 8
  %43 = call i8** %31(%struct.jpeg_common_struct* %33, %struct.jvirt_sarray_control* %36, i32 %39, i32 %42, i32 0)
  %44 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %45 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %44, i32 0, i32 2
  store i8** %43, i8*** %45, align 8
  br label %46

46:                                               ; preds = %26, %7
  %47 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %48 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %47, i32 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %51 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %50, i32 0, i32 5
  %52 = load i32, i32* %51, align 8
  %53 = sub i32 %49, %52
  store i32 %53, i32* %16, align 4
  %54 = load i32, i32* %14, align 4
  %55 = load i32*, i32** %13, align 8
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 %54, %56
  store i32 %57, i32* %17, align 4
  %58 = load i32, i32* %16, align 4
  %59 = load i32, i32* %17, align 4
  %60 = icmp ugt i32 %58, %59
  br i1 %60, label %61, label %63

61:                                               ; preds = %46
  %62 = load i32, i32* %17, align 4
  store i32 %62, i32* %16, align 4
  br label %63

63:                                               ; preds = %61, %46
  %64 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %65 = getelementptr inbounds %struct.jpeg_decompress_struct.637, %struct.jpeg_decompress_struct.637* %64, i32 0, i32 27
  %66 = load i32, i32* %65, align 4
  %67 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %68 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %67, i32 0, i32 4
  %69 = load i32, i32* %68, align 4
  %70 = sub i32 %66, %69
  store i32 %70, i32* %17, align 4
  %71 = load i32, i32* %16, align 4
  %72 = load i32, i32* %17, align 4
  %73 = icmp ugt i32 %71, %72
  br i1 %73, label %74, label %76

74:                                               ; preds = %63
  %75 = load i32, i32* %17, align 4
  store i32 %75, i32* %16, align 4
  br label %76

76:                                               ; preds = %74, %63
  %77 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %78 = getelementptr inbounds %struct.jpeg_decompress_struct.637, %struct.jpeg_decompress_struct.637* %77, i32 0, i32 83
  %79 = load %struct.jpeg_color_quantizer.636*, %struct.jpeg_color_quantizer.636** %78, align 8
  %80 = getelementptr inbounds %struct.jpeg_color_quantizer.636, %struct.jpeg_color_quantizer.636* %79, i32 0, i32 1
  %81 = load void (%struct.jpeg_decompress_struct.637*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct.637*, i8**, i8**, i32)** %80, align 8
  %82 = load %struct.jpeg_decompress_struct.637*, %struct.jpeg_decompress_struct.637** %8, align 8
  %83 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %84 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %83, i32 0, i32 2
  %85 = load i8**, i8*** %84, align 8
  %86 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %87 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %86, i32 0, i32 5
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i8*, i8** %85, i64 %89
  %91 = load i8**, i8*** %12, align 8
  %92 = load i32*, i32** %13, align 8
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i8*, i8** %91, i64 %94
  %96 = load i32, i32* %16, align 4
  call void %81(%struct.jpeg_decompress_struct.637* %82, i8** %90, i8** %95, i32 %96)
  %97 = load i32, i32* %16, align 4
  %98 = load i32*, i32** %13, align 8
  %99 = load i32, i32* %98, align 4
  %100 = add i32 %99, %97
  store i32 %100, i32* %98, align 4
  %101 = load i32, i32* %16, align 4
  %102 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %103 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %102, i32 0, i32 5
  %104 = load i32, i32* %103, align 8
  %105 = add i32 %104, %101
  store i32 %105, i32* %103, align 8
  %106 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %107 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %106, i32 0, i32 5
  %108 = load i32, i32* %107, align 8
  %109 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %110 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %109, i32 0, i32 3
  %111 = load i32, i32* %110, align 8
  %112 = icmp uge i32 %108, %111
  br i1 %112, label %113, label %123

113:                                              ; preds = %76
  %114 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %115 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %114, i32 0, i32 3
  %116 = load i32, i32* %115, align 8
  %117 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %118 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %117, i32 0, i32 4
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %119, %116
  store i32 %120, i32* %118, align 4
  %121 = load %struct.my_post_controller*, %struct.my_post_controller** %15, align 8
  %122 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %121, i32 0, i32 5
  store i32 0, i32* %122, align 8
  br label %123

123:                                              ; preds = %113, %76
  ret void
}

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project/ 24c8eaec9467b2aaf70b0db33a4e4dd415139a50)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
